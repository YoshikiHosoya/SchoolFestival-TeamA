// =====================================================================================================================================================================
//
// チュートリアルマネージャーの処理 [tutorialmanager.h]
// Author : fujiwara masato
//
// =====================================================================================================================================================================
#ifndef _TUTORIALMANAGER_H_
#define _TUTORIALMANAGER_H_

// =====================================================================================================================================================================
// インクルードファイル
// =====================================================================================================================================================================
#include "main.h"

// =====================================================================================================================================================================
// 前方宣言
// =====================================================================================================================================================================
class CTutorialUI;
// =====================================================================================================================================================================
// チュートリアルUIクラス
// =====================================================================================================================================================================
class CTutorialManager
{
public:
	// チュートリアルの行程
	enum TUTORIAL_STATE
	{
		RANKING_STATE_NONE = -1,
		RANKING_STATE_1,
		RANKING_STATE_2,
		RANKING_STATE_3,
		RANKING_STATE_4,
		RANKING_STATE_5,
	};

	CTutorialManager();						// コンストラクタ
	~CTutorialManager();					// デストラクタ

	/* メンバ関数 */
	HRESULT					Init(void);		// 初期化
	void					Uninit(void);	// 終了
	void					Update(void);	// 更新

	/* 静的メンバ関数 */
	static					CTutorialManager	*Create();					// 生成
	/* メンバ関数 */
	void					TutorialUiOrder();								// Uiの出現順番

private:
	/* 静的メンバ変数 */
	/* メンバ関数 */
	/* メンバ変数 */
	TUTORIAL_STATE			m_TutorialState;								// チュートリアルの状態
	CTutorialUI				*m_pTutorialUI;									// チュートリアルUIのポインタ
};
#endif