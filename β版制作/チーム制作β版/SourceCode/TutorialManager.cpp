// =====================================================================================================================================================================
//
// チュートリアルマネージャーの処理 [tutorialmanager.h]
// Author : fujiwara masato
//
// =====================================================================================================================================================================
#include "main.h"
#include "tutorialmanager.h"
#include "basemode.h"
#include "manager.h"
#include "tutorialui.h"
#include "renderer.h"
#include "fade.h"
#include "inputKeyboard.h"

// =====================================================================================================================================================================
// 静的メンバ変数の初期化
// =====================================================================================================================================================================

// =====================================================================================================================================================================
// マクロ定義
// =====================================================================================================================================================================

// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CTutorialManager::CTutorialManager()
{
	m_TutorialState = TUTORIAL_STATE_NONE;
	m_pTutorialUI = nullptr;
	m_nWaitTime = 0;
	m_bOneFlag = false;
}

// =====================================================================================================================================================================
//
// デストラクタ
//
// =====================================================================================================================================================================
CTutorialManager::~CTutorialManager()
{
	// uiの解放
	if (m_pTutorialUI)
	{
		m_pTutorialUI->Uninit();
		m_pTutorialUI = nullptr;
	}
}

// =====================================================================================================================================================================
//
// 初期化処理
//
// =====================================================================================================================================================================
HRESULT CTutorialManager::Init(void)
{
	// チュートリアルUIの生成
	m_pTutorialUI = CTutorialUI::Create();
	return S_OK;
}

// =====================================================================================================================================================================
//
// 終了処理
//
// =====================================================================================================================================================================
void CTutorialManager::Uninit(void)
{
}

// =====================================================================================================================================================================
//
// 更新処理
//
// =====================================================================================================================================================================
void CTutorialManager::Update(void)
{
	//キーボード情報取得
	CKeyboard *key = CManager::GetInputKeyboard();

	// エンターを押したとき
	if (key->GetKeyboardTrigger(DIK_RETURN))
	{
		// ゲームモードへステート遷移
		CManager::GetRenderer()->GetFade()->SetFade(CFADE::FADETYPE::FADETYPE_MODE, CManager::MODE_GAME);
	}

	// 各ステートごとの関数を管理する
	StateManager();
	// チュートリアルの順番管理
	TutorialState();
	// プレイヤーがチュートリアル通りにボタンを押したら
	// タイマー開始
	//if ()
	//{
		// 待ち時間の管理
		WaitTime();
	//}
}

// =====================================================================================================================================================================
//
// 生成
//
// =====================================================================================================================================================================
CTutorialManager * CTutorialManager::Create()
{
	//メモリの確保
	CTutorialManager *pTutorialManager = new CTutorialManager();

	// 初期化
	pTutorialManager->Init();

	// ポインタを返す
	return pTutorialManager;
}

// =====================================================================================================================================================================
//
// Uiの出現順番
//
// =====================================================================================================================================================================
void CTutorialManager::TutorialState()
{
	// 描画許可順番
	switch (m_TutorialState)
	{
	case CTutorialManager::TUTORIAL_STATE_NONE:
		break;
	case CTutorialManager::TUTORIAL_STATE_FIRST:
		break;
	case CTutorialManager::TUTORIAL_STATE_1:
		break;
	case CTutorialManager::TUTORIAL_STATE_2:
		break;
	case CTutorialManager::TUTORIAL_STATE_3:
		break;
	case CTutorialManager::TUTORIAL_STATE_4:
		break;
	case CTutorialManager::TUTORIAL_STATE_5:
		break;
	case CTutorialManager::TUTORIAL_STATE_6:
		break;
	case CTutorialManager::TUTORIAL_STATE_FINAL:
		break;
	default:
		break;
	}
}

// =====================================================================================================================================================================
//
// ステートを切り替える際の時間の設定
//
// =====================================================================================================================================================================
void CTutorialManager::WaitTime()
{
	// 時間の減少
	m_nWaitTime--;

	// 時間が0以下になった時
	if (m_nWaitTime <= 0)
	{
		// 次のステートに移行する
		NextState();
	}
}

// =====================================================================================================================================================================
//
// ステートを切り替える際の時間の管理
//
// =====================================================================================================================================================================
void CTutorialManager::SetWaitTime(int Time)
{
	// 待ち時間を設定する
	m_nWaitTime = Time;
}

// =====================================================================================================================================================================
//
// ステートを切り替える際の時間の設定
//
// =====================================================================================================================================================================
void CTutorialManager::NextState()
{
	// 次のステートに移行する
	if (m_TutorialState != TUTORIAL_STATE_END)
	{
		m_TutorialState = static_cast<TUTORIAL_STATE>(m_TutorialState + 1);
		m_bOneFlag = false;

		if (m_pTutorialUI)
		{
			m_pTutorialUI->SetDrawDisp(m_pTutorialUI->GetTutorialUiType());
		}
	}
	else
	{
		// ゲームモードへステート遷移
		CManager::GetRenderer()->GetFade()->SetFade(CFADE::FADETYPE::FADETYPE_MODE, CManager::MODE_GAME);
	}
}

// =====================================================================================================================================================================
//
// 各ステートごとの関数を管理する
//
// =====================================================================================================================================================================
void CTutorialManager::StateManager()
{
	// この処理がまだ通っていなかった時
	if (!m_bOneFlag)
	{
		// 次のステートに移行するまでの時間の設定
		SetWaitTime(60);
		// この処理を次に許可が出るまで通さない
		m_bOneFlag = true;
	}
}
