// =====================================================================================================================================================================
//
// チュートリアルマネージャーの処理 [tutorialmanager.h]
// Author : fujiwara masato
//
// =====================================================================================================================================================================
#include "main.h"
#include "tutorialmanager.h"
#include "basemode.h"
#include "manager.h"
#include "tutorialui.h"
#include "renderer.h"
#include "fade.h"
#include "inputKeyboard.h"

// =====================================================================================================================================================================
// 静的メンバ変数の初期化
// =====================================================================================================================================================================

// =====================================================================================================================================================================
// マクロ定義
// =====================================================================================================================================================================

// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CTutorialManager::CTutorialManager()
{
	m_TutorialState = RANKING_STATE_NONE;
	m_pTutorialUI = nullptr;
}

// =====================================================================================================================================================================
//
// デストラクタ
//
// =====================================================================================================================================================================
CTutorialManager::~CTutorialManager()
{
	// uiの解放
	if (m_pTutorialUI)
	{
		m_pTutorialUI->Uninit();
		m_pTutorialUI = nullptr;
	}
}

// =====================================================================================================================================================================
//
// 初期化処理
//
// =====================================================================================================================================================================
HRESULT CTutorialManager::Init(void)
{
	// チュートリアルUIの生成
	m_pTutorialUI = CTutorialUI::Create();
	return S_OK;
}

// =====================================================================================================================================================================
//
// 終了処理
//
// =====================================================================================================================================================================
void CTutorialManager::Uninit(void)
{
}

// =====================================================================================================================================================================
//
// 更新処理
//
// =====================================================================================================================================================================
void CTutorialManager::Update(void)
{
	//キーボード情報取得
	CKeyboard *key = CManager::GetInputKeyboard();

	// エンターを押したとき
	if (key->GetKeyboardTrigger(DIK_RETURN))
	{
		// ゲームモードへ状態遷移
		CManager::GetRenderer()->GetFade()->SetFade(CManager::MODE_GAME);
	}
}

// =====================================================================================================================================================================
//
// 生成
//
// =====================================================================================================================================================================
CTutorialManager * CTutorialManager::Create()
{
	//メモリの確保
	CTutorialManager *pTutorialManager = new CTutorialManager();

	// 初期化
	pTutorialManager->Init();

	return pTutorialManager;
}

// =====================================================================================================================================================================
//
// Uiの出現順番
//
// =====================================================================================================================================================================
void CTutorialManager::TutorialUiOrder()
{
	// 描画許可順番
	switch (m_TutorialState)
	{
	case CTutorialManager::RANKING_STATE_NONE:
		break;
	case CTutorialManager::RANKING_STATE_1:
		break;
	case CTutorialManager::RANKING_STATE_2:
		break;
	case CTutorialManager::RANKING_STATE_3:
		break;
	case CTutorialManager::RANKING_STATE_4:
		break;
	case CTutorialManager::RANKING_STATE_5:
		break;
	default:
		break;
	}
}
