// ----------------------------------------
//
// 床処理の説明[floor.cpp]
// Author : Fujiwara Masato
//
// ----------------------------------------

// ----------------------------------------
//
// インクルードファイル
//
// ----------------------------------------
/* 描画 */
#include "floor.h"
#include "game.h"
#include "scene.h"
#include "debugproc.h"

// ----------------------------------------
//
// マクロ定義
//
// ----------------------------------------
#define FLOOR_ROTMOVE (0.01f)		// 角度の移動量
#define FLOOR_SIZE (100.0f)			// サイズ
#define FLOOR_TEX "data/TEXTURE/FLOOR/floor.png"				// テクスチャー
#define FLOOR_ANGLE (D3DX_PI / 1)	// 湾曲の角度

// ----------------------------------------
//
// グローバル変数
//
// ----------------------------------------

// ----------------------------------------
//
// 静的変数宣言
//
// ----------------------------------------
LPDIRECT3DTEXTURE9 CFloor::m_pTex = NULL;

// ----------------------------------------
// コンストラクタ処理
// ----------------------------------------
CFloor::CFloor() : CScene(ACTOR_FLOOR, LAYER_3DOBJECT)
{
	/* 変数の初期化 */
	// 回転量
	m_pVtxBuff = NULL;
	m_pIndex = NULL;
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_size = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_nNumberVertex = 4;
	m_nNumIndex = 4;
	m_nNumPolygon = 2;
	m_nBlock_Width = 1;
	m_nBlock_Depth = 1;
}

// ----------------------------------------
// デストラクタ処理
// ----------------------------------------
CFloor::~CFloor()
{
}

// ----------------------------------------
// 初期化処理
// ----------------------------------------
void CFloor::Init(void)
{
	// 変数宣言
	VERTEX_3D *pVtx;	// 頂点情報へのポイント
	WORD * pIdx;		// インデックスデータへのポインタを取得
	LPDIRECT3DDEVICE9 pDevice =		// デバイスの取得
		CManager::GetRenderer()->GetDevice();
	D3DXVECTOR3 VecA, VecB;					// ベクトル
											//D3DXVECTOR3 Cross0, Cross1_2, Cross3;	// 外積
	int nCountDirect;						// 縦のカウント
	int nCountWidth;						// 横のカウント
	int nCntBlock = 0;
	float fYAngle;							// yの角度
	float fYRadian;							// yのラジアン値
	D3DXVECTOR3 Cross[2000];				// 外積
	// ブロック描画の原点の初期設定
	m_OriginBlock = D3DXVECTOR3(
		m_size.x * -0.5f * m_nBlock_Width,
		0.0f,
		m_size.z * 0.5f * m_nBlock_Depth);
	// 総頂点数・インデックス・ポリゴンの初期設定(計算)
	m_nNumberVertex =
		(m_nBlock_Depth + 1) * (m_nBlock_Width + 1);
	m_nNumIndex =
		(m_nBlock_Width + 1) * 2 * m_nBlock_Depth +
		2 * (m_nBlock_Depth - 1);
	m_nNumPolygon =
		m_nBlock_Depth * m_nBlock_Width * 2 +
		4 * (m_nBlock_Depth - 1);

	// 角度の計算
	fYAngle = 0;
	// 頂点バッファの生成
	pDevice->CreateVertexBuffer(
		sizeof(VERTEX_3D) * m_nNumberVertex,
		D3DUSAGE_WRITEONLY,
		FVF_VERTEX_3D,
		D3DPOOL_MANAGED,
		&m_pVtxBuff,
		NULL);
	// インデックスバッファの生成
	pDevice->CreateIndexBuffer(sizeof(WORD) *
		m_nNumIndex,
		D3DUSAGE_WRITEONLY,
		D3DFMT_INDEX16,
		D3DPOOL_MANAGED,
		&m_pIndex,
		NULL);
	// 頂点データの範囲をロックし、頂点バッファへのポインタ
	m_pVtxBuff->Lock(
		0,
		0,
		(void **)&pVtx,
		0);
	//頂点設定 //
	//行ループ
	for (nCountDirect = 0; nCountDirect < m_nBlock_Depth + 1; nCountDirect++)
	{
		// 列ループ
		for (nCountWidth = 0; nCountWidth < m_nBlock_Width + 1; nCountWidth++)
		{
			// ラジアン値(Y)
			fYRadian = fYAngle * nCountDirect;
			fYRadian = CCalculation::Rot_One_Limit(fYRadian);

			// 頂点座標の設定
			pVtx[0].pos =
				D3DXVECTOR3(
					m_OriginBlock.x +
					(m_size.x * nCountWidth),
					m_OriginBlock.y +
					cosf(fYRadian) * m_size.y,
					m_OriginBlock.z -
					(m_size.z * nCountDirect));
			// カラーの設定
			pVtx[0].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);

			// テクスチャーの設定
			pVtx[0].tex = D3DXVECTOR2(1.0f * nCountWidth, 1.0f * nCountDirect);

			// ポイント合わせ
			pVtx++;
		}
	}
	pVtx -= m_nNumberVertex;
	// ポリゴンごとの法線の設定
	for (int nCntDepth = 0; nCntDepth < m_nBlock_Depth; nCntDepth++, nCntBlock++)
	{
		for (int nCntWidth = 0; nCntWidth < m_nBlock_Width; nCntWidth++, nCntBlock++)
		{
			// ベクトル
			VecA = pVtx[nCntBlock + m_nBlock_Width + 2].pos - pVtx[nCntBlock].pos;
			VecB = pVtx[nCntBlock + m_nBlock_Width + 1].pos - pVtx[nCntBlock].pos;
			// 外積計算
			Cross[nCntWidth * 2 + nCntDepth * m_nBlock_Width * 2] = CCalculation::Cross_product(VecA, VecB);
			// 正規化
			D3DXVec3Normalize(&Cross[nCntWidth * 2 + nCntDepth * m_nBlock_Width * 2], &Cross[nCntWidth * 2 + nCntDepth * m_nBlock_Width * 2]);
			// ベクトル
			VecA = pVtx[nCntBlock + 1].pos - pVtx[nCntBlock].pos;
			VecB = pVtx[nCntBlock + m_nBlock_Width + 2].pos - pVtx[nCntBlock].pos;
			// 外積計算
			Cross[nCntWidth * 2 + nCntDepth * m_nBlock_Width * 2 + 1] = CCalculation::Cross_product(VecA, VecB);
			// 正規化
			D3DXVec3Normalize(&Cross[nCntWidth * 2 + nCntDepth * m_nBlock_Width * 2 + 1], &Cross[nCntWidth * 2 + nCntDepth * m_nBlock_Width * 2 + 1]);
			// 左上
			pVtx[nCntBlock].nor += Cross[nCntWidth * 2 + nCntDepth * m_nBlock_Width * 2] + Cross[nCntWidth * 2 + nCntDepth * m_nBlock_Width * 2 + 1];
			// 右上
			pVtx[nCntBlock + 1].nor += Cross[nCntWidth * 2 + nCntDepth * m_nBlock_Width * 2 + 1];
			// 左下
			pVtx[nCntBlock + m_nBlock_Width + 1].nor += Cross[nCntWidth * 2 + nCntDepth * m_nBlock_Width * 2];
			// 右下
			pVtx[nCntBlock + m_nBlock_Width + 2].nor += Cross[nCntWidth * 2 + nCntDepth * m_nBlock_Width * 2] + Cross[nCntWidth * 2 + nCntDepth * m_nBlock_Width * 2 + 1];
		}
	}
	nCntBlock = 0;
	// 頂点法線の設定
	for (int nCntDepth = 0; nCntDepth < m_nBlock_Depth + 1; nCntDepth++, nCntBlock++)
	{
		for (int nCntWidth = 0; nCntWidth < m_nBlock_Width + 1; nCntWidth++, nCntBlock++)
		{
			// 最初
			if (nCntDepth == 0 && nCntWidth == 0)
			{
				pVtx[0].nor /= 2;
			}
			// 最後
			else if (nCntDepth == m_nBlock_Depth && nCntWidth == m_nBlock_Width)
			{
				pVtx[0].nor /= 2;
			}
			// 1行の列の最後
			else if (nCntDepth == 0 && nCntWidth == m_nBlock_Width)
			{
			}
			// 最後行の列の最初
			else if (nCntDepth == m_nBlock_Depth && nCntWidth == 0)
			{
			}
			// 最初の行または最後の行
			else if (nCntDepth == 0 || nCntDepth == m_nBlock_Depth)
			{
				pVtx[0].nor /= 3;
			}
			// 最初の列または最後の列
			else if (nCntWidth == 0 || nCntWidth == m_nBlock_Width)
			{
				pVtx[0].nor /= 3;
			}
			// それ以外
			else
			{
				pVtx[0].nor /= 6;
			}
			pVtx++;
		}
	}

	// アンロック
	m_pVtxBuff->Unlock();

	// 頂点データの範囲をロックし、頂点バッファへのポインタ
	m_pIndex->Lock(0, 0, (void **)&pIdx, 0);

	// 縦ブロック個数
	for (nCountDirect = 0; nCountDirect < m_nBlock_Depth; nCountDirect++)
	{
		// ２回目のループ以降
		if (nCountDirect >= 1)
		{
			// 縮退ポリゴン分の頂点追加
			pIdx[0] = nCountDirect * (m_nBlock_Width + 1) + m_nBlock_Width + 1;

			// インデックスのポイント合わせ
			pIdx++;
		}

		// 横ブロックの頂点数
		for (nCountWidth = 0; nCountWidth < m_nBlock_Width + 1; nCountWidth++)
		{
			// 描画順番のインデックス
			pIdx[0] = nCountDirect * (m_nBlock_Width + 1) + nCountWidth + m_nBlock_Width + 1;
			pIdx[1] = nCountDirect * (m_nBlock_Width + 1) + nCountWidth;

			// インデックスのポイント合わせ
			pIdx += 2;
		}

		// 縮退ポリゴンを作る必要がある場合
		if (nCountDirect < m_nBlock_Depth - 1)
		{
			// 縮退ポリゴン分の頂点追加
			pIdx[0] = nCountDirect * (m_nBlock_Width + 1) + m_nBlock_Width;
			// インデックスのポイント合わせ
			pIdx++;
		}
	}

	// アンロック
	m_pIndex->Unlock();
}

// ----------------------------------------
// 終了処理
// ----------------------------------------
void CFloor::Uninit(void)
{
	// 頂点バッファの開放
	if (m_pVtxBuff != NULL)
	{
		m_pVtxBuff->Release();
		m_pVtxBuff = NULL;
	}
}

// ----------------------------------------
// 更新処理
// ----------------------------------------
void CFloor::Update(void)
{
	// 変数宣言
	VERTEX_3D *pVtx;	// 頂点情報へのポイント
	int nCntBlock = 0;
	// 頂点データの範囲をロックし、頂点バッファへのポインタ
	m_pVtxBuff->Lock(
		0,
		0,
		(void **)&pVtx,
		0);
	// アンロック
	m_pVtxBuff->Unlock();
}

// ----------------------------------------
// 描画処理
// ----------------------------------------
void CFloor::Draw(void)
{
	// 変数宣言
	LPDIRECT3DDEVICE9 pDevice =		// デバイスの取得
		CManager::GetRenderer()->GetDevice();

	// 回転・位置の計算用変数
	D3DXMATRIX mtxRot, mtxTrans;

	// ワールドマトリックスの初期化(単位行列にするため)
	D3DXMatrixIdentity(&m_mtxWorld);

	// 回転を反映 //
	// ヨーピッチロールによる回転行列作成(y,x,z)
	D3DXMatrixRotationYawPitchRoll(&mtxRot,	// 総合の入れ物
		m_rot.y, m_rot.x, m_rot.z);			// それぞれの回転量
	// 行列の積(1:ワールド行列 = 2:ワールド行列 * 3:回転行列)
	D3DXMatrixMultiply(&m_mtxWorld,	// 1
		&m_mtxWorld,					// 2
		&mtxRot);							// 3
	// 平行移動行列作成(オフセット)
	D3DXMatrixTranslation(&mtxTrans,// 総合の入れ物
		m_pos.x, m_pos.y, m_pos.z);	// それぞれの移動量
	// 行列の積(1:ワールド行列 = 2:ワールド行列 * 3:移動行列)
	D3DXMatrixMultiply(&m_mtxWorld,	// 1
		&m_mtxWorld,				// 2
		&mtxTrans);					// 3

	// ワールドマトリックスの設定
	pDevice->SetTransform(D3DTS_WORLD, &m_mtxWorld);

	// 頂点バッファをデータストリームに設定
	pDevice->SetStreamSource(0, m_pVtxBuff, 0, sizeof(VERTEX_3D));


	// インデックスバッファをデータストリームを設定
	pDevice->SetIndices(
		m_pIndex);

	// 頂点フォーマットの設定
	pDevice->SetFVF(FVF_VERTEX_3D);

	// テクスチャの設定
	pDevice->SetTexture(
		0,
		m_pTex);

	// ポリゴンの描画
	pDevice->DrawIndexedPrimitive(
		D3DPT_TRIANGLESTRIP,
		0,
		0,
		m_nNumberVertex,
		0,
		m_nNumPolygon);
}

// ----------------------------------------
// 読み込み処理
// ----------------------------------------
HRESULT CFloor::Load(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice =
		CManager::GetRenderer()->GetDevice();
	// テクスチャー設定
	D3DXCreateTextureFromFile(pDevice, FLOOR_TEX, &m_pTex);
	return S_OK;
}

// ----------------------------------------
// 読み込んだ情報を破棄
// ----------------------------------------
void CFloor::UnLoad(void)
{
	// テクスチャの開放
	if (m_pTex != NULL)
	{
		m_pTex->Release();
		m_pTex = NULL;
	}
}

// ----------------------------------------
// 作成処理
// ----------------------------------------
CFloor * CFloor::Create(
	D3DXVECTOR3 pos,
	D3DXVECTOR3 size,
	D3DXVECTOR3 rot,
	int nWidth,
	int nDepth
)
{
	// 変数宣言
	CFloor * pFloor;		// シーン2Dクラス
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pFloor = new CFloor();
	// 位置情報
	pFloor->m_pos = pos;
	// サイズ情報
	pFloor->m_size = size;
	// 回転情報
	pFloor->m_rot = rot;
	// 横ブロック
	pFloor->m_nBlock_Width = nWidth;
	// 縦ブロック
	pFloor->m_nBlock_Depth = nDepth;
	// 初期化処理
	pFloor->Init();
	// 生成したオブジェクトを返す
	return pFloor;
}

// ----------------------------------------
// 接している面の高さを取得
// ----------------------------------------
float CFloor::GetHeight(D3DXVECTOR3 pos)
{
	// 変数宣言
	VERTEX_3D *pVtx;					// 頂点情報へのポイント
	D3DXVECTOR3 VecA, VecB,VecObject;	// ベクトル
	D3DXVECTOR3 Normal;					// 法線
	float fPos_Y = 0;					// 高さ
	int nCntBlock = 0;					// ブロック数
	// 頂点データの範囲をロックし、頂点バッファへのポインタ
	m_pVtxBuff->Lock(
		0,
		0,
		(void **)&pVtx,
		0);

	// ブロックごとに
	for (int nCntDepth = 0; nCntDepth < m_nBlock_Depth; nCntDepth++)
	{
		for (int nCntWidth = 0; nCntWidth < m_nBlock_Width; nCntWidth++, nCntBlock++)
		{
			// 右上のポリゴン
			if (CCalculation::CrossCollision(&pos, &pVtx[0].pos, &pVtx[1].pos, &pVtx[m_nBlock_Width + 2].pos))
			{
				// ベクトル
				VecA = pVtx[m_nBlock_Width + 2].pos - pVtx[1].pos;	// ベクトルB
				VecB = pVtx[0].pos - pVtx[1].pos;					// ベクトルA
				VecObject = pos - (m_pos + pVtx[1].pos);			// オブジェクトまでのベクトル
				// 高さの代入
				fPos_Y = pVtx[1].pos.y;
				// 外積
				D3DXVec3Cross(&Normal, &VecA, &VecB);
				// 正規化
				D3DXVec3Normalize(&Normal, &Normal);
				// 頂点データの範囲をアンロック
				m_pVtxBuff->Unlock();
				// 高さを返す
				return fPos_Y + ((-Normal.x * VecObject.x) + (-Normal.z * VecObject.z)) / Normal.y + m_pos.y;
			}
			// 左下のポリゴン
			else if (CCalculation::CrossCollision(&pos, &pVtx[m_nBlock_Width + 2].pos, &pVtx[m_nBlock_Width + 1].pos, &pVtx[0].pos))
			{
				// ベクトル
				VecA = pVtx[0].pos - pVtx[m_nBlock_Width + 1].pos;						// ベクトルA
				VecB = pVtx[m_nBlock_Width + 2].pos - pVtx[m_nBlock_Width + 1].pos;		// ベクトルB
				VecObject = pos - (m_pos + pVtx[m_nBlock_Width + 1].pos);				// オブジェクトまでのベクトル
				// 高さの代入
				fPos_Y = pVtx[m_nBlock_Width + 1].pos.y;
				// 外積
				D3DXVec3Cross(&Normal, &VecA, &VecB);
				// 正規化
				D3DXVec3Normalize(&Normal, &Normal);
				// 頂点データの範囲をアンロック
				m_pVtxBuff->Unlock();
				// 高さを返す
				return fPos_Y + ((-Normal.x * VecObject.x) + (-Normal.z * VecObject.z)) / Normal.y + m_pos.y;
			}
			// 頂点情報の更新
			pVtx++;
		}
		// 頂点情報の更新
		pVtx++;

	}

	// 頂点データの範囲をアンロック
	m_pVtxBuff->Unlock();
	// 高さを返す
	return 0.0f;
}