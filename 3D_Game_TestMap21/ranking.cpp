// ================================================================================================================================================================================
//
// ランキング処理 [ranking.cpp]
// Author : Sato Yoshiki
//
// ================================================================================================================================================================================
#include "ranking.h"			// ランキングヘッダー
#include "keyboard.h"
#include "fade.h"
#include "score.h"
#include "rankingUI.h"
#include "multinumber.h"
#include "load.h"
#include "sound.h"
#include "number.h"
#include "xinputGpad.h"

// ================================================================================================================================================================================
// マクロ定義
// ================================================================================================================================================================================
#define	TEXTURE_RANKING				"data/TEXTURE/num00.png"				// 読み込むテクスチャファイル名
#define RANKING_SIZE				(30)									// ランキングボードの大きさ
#define RANKING_BETWEEN				(30)									// 間
#define POINT_MAX					(8)										// 桁数
#define RANKING_DATE				(5)										// ランキング数
#define SAVE_FILE_NAME				("text.txt")							// セーブファイル

#define RANKING_POSX				(460.0f)								// ランキングの座標
#define RANKING_POSY				(180.0f)								// ランキングの座標
#define RANKING_SIZEX				(20)									// ランキングの幅
#define RANKING_SIZEY				(55.0f)									// ランキングの高さ
#define RANKING_SPACE				(50.0f)									// ランキングの間隔
#define RANKING_HEIGHT				(90.0f)								// ランキングの縦の間隔(高さ)

// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CRanking::CRanking()
{
}

// =====================================================================================================================================================================
//
// デストラクタ
//
// =====================================================================================================================================================================
CRanking::~CRanking()
{
}

// ================================================================================================================================================================================
// 
// 初期化処理
//
// ================================================================================================================================================================================
HRESULT CRanking::Init()
{
	// ランキングUIの画像のロード
	CRankingUI::Load();

	// ランキングUIの生成
	CRankingUI::Create();

	// スコアの画像のロード
	CNumber::Load();

	return S_OK;
}

// ================================================================================================================================================================================
//
// 終了処理
//
// ================================================================================================================================================================================
void CRanking::Uninit(void)
{
	for (int nCntRanking = 0; nCntRanking < RANKING_DATE; nCntRanking++)
	{
		// マルチナンバーの終了
		if (m_pMultiNumber[nCntRanking])
		{
			m_pMultiNumber[nCntRanking]->Uninit();
			delete m_pMultiNumber[nCntRanking];
			m_pMultiNumber[nCntRanking] = nullptr;
		}
	}

	// ランキングUIの画像の破棄
	CRankingUI::Unload();

	// 全ての開放
	CScene::ReleaseAll();
}

// ================================================================================================================================================================================
//
// 更新処理
//
// ================================================================================================================================================================================
void CRanking::Update(void)
{
	// 変数
	CKeyboard	*pKeyboard		= CManager::GetKeyboard();
	CXinputGpad *pXinputGpad	= CManager::GetXinputGpad();

	// フェードしていないとき
	if (CFade::GetFadeState() == CFade::FADE_NONE)
	{
		// タイトルへ遷移
		if (pKeyboard->GetKeyboardTrigger(DIK_RETURN) || pXinputGpad->GetTriggerXinputGpad(CXinputGpad::XINPUT_A) || pXinputGpad->GetTriggerXinputGpad(CXinputGpad::XINPUT_START))
		{
			// サウンド
			CManager::GetSound()->PlaySound(CSound::SOUND_LABEL_SE_ENTER);
			// タイトルへ
			CFade::SetFade(CManager::TITLE);
		}
	}
}

// ================================================================================================================================================================================
//
// 描画処理
//
// ================================================================================================================================================================================
void CRanking::Draw(void)
{
}

// =====================================================================================================================================================================
//
// ランキングの生成
//
// =====================================================================================================================================================================
CRanking * CRanking::Create()
{
	// 変数
	CRanking *pRanking;

	// メモリの確保
	pRanking = new CRanking;

	// 初期化
	pRanking->Init();

	CLoad::RankingLoad();

	int *pData = CLoad::GetRankingData();

	D3DXVECTOR3 size = D3DXVECTOR3(RANKING_SIZEX, RANKING_SIZEY, 0.0f);

	for (int nCntRanking = 0; nCntRanking < RANKING_DATE; nCntRanking++)
	{
		D3DXVECTOR3 pos = D3DXVECTOR3(RANKING_POSX, RANKING_POSY + RANKING_HEIGHT * nCntRanking, 0.0f);
		// マルチナンバーの生成
		pRanking->m_pMultiNumber[nCntRanking] = CMultiNumber::Create(pos, size, *pData, RANKING_SPACE);
		pData++;
	}

	return pRanking;
}