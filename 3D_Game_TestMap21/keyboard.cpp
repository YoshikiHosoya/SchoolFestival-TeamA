// =====================================================================================================================================================================
//
// キーボード処理 [keyboard.cpp]
// Author : Sato Yoshiki
//
// =====================================================================================================================================================================
#include "keyboard.h"

// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CKeyboard::CKeyboard()
{
}

// =====================================================================================================================================================================
//
// デストラクタ
//
// =====================================================================================================================================================================
CKeyboard::~CKeyboard()
{

}

// =====================================================================================================================================================================
//
// キーボードの初期化
//
// =====================================================================================================================================================================
HRESULT CKeyboard::Init(HINSTANCE hInstance, HWND hWnd)
{	
	// 入力の初期化
	CInput::Init(hInstance, hWnd);

	// 入力デバイス（キーボード）の作成
	if (FAILED(m_pInput->CreateDevice(GUID_SysKeyboard, &m_pDevKeyboard, NULL)))
	{
		return E_FAIL;
	}
	
	// データフォーマットを設定
	if (FAILED(m_pDevKeyboard->SetDataFormat(&c_dfDIKeyboard)))
	{
		return E_FAIL;
	}

	// 協調モードを設定（フォアグラウンド＆非排他モード）
	if (FAILED(m_pDevKeyboard->SetCooperativeLevel(hWnd, (DISCL_FOREGROUND | DISCL_NONEXCLUSIVE))))
	{
		return E_FAIL;
	}

	// キーボードへのアクセス権を獲得(入力制御開始)
	m_pDevKeyboard->Acquire();

	return S_OK;
}

// =====================================================================================================================================================================
//
// キーボードの終了処理
//
// =====================================================================================================================================================================
void CKeyboard::Uninit(void)
{
	// 入力デバイス(キーボード)の開放
	if (m_pDevKeyboard != NULL)
	{
		m_pDevKeyboard->Unacquire();
		m_pDevKeyboard->Release();
		m_pDevKeyboard = NULL;
	}
}

// =====================================================================================================================================================================
//
// キーボードの更新処理
//
// =====================================================================================================================================================================
void CKeyboard::Update(void)
{
	BYTE aKeyState[NUM_KEY_MAX];						// キーボードの入力情報

	// デバイスからデータを取得
	if (SUCCEEDED(m_pDevKeyboard->GetDeviceState(sizeof(aKeyState), aKeyState)))
	{
		for (int nCntKey = 0; nCntKey < NUM_KEY_MAX; nCntKey++)
		{
			m_aKeyStateTrigger[nCntKey] = (aKeyState[nCntKey] ^ m_aKeyState[nCntKey]) & aKeyState[nCntKey];	// トリガー処理

			m_aKeyState[nCntKey] = aKeyState[nCntKey];	// キープレス情報				←前回のキー情報を利用するため
		}
	}
	else
	{
		m_pDevKeyboard->Acquire();						// キーボードへのアクセス権を取得
		ZeroMemory(m_aKeyStateTrigger, sizeof m_aKeyStateTrigger);
	}
}

// =====================================================================================================================================================================
//
// キーボードのトリガー状態を取得
//
// =====================================================================================================================================================================
bool CKeyboard::GetKeyboardTrigger(int nKey)
{
	return(m_aKeyStateTrigger[nKey] & 0x80) ? true : false;
}

// =====================================================================================================================================================================
//
// キーボードのプレス状態を取得
//
// =====================================================================================================================================================================
bool CKeyboard::GetKeyboardPress(int nKey)
{
	return(m_aKeyState[nKey] & 0x80) ? true : false;
}