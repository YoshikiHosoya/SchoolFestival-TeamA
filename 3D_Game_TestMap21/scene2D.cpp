// =====================================================================================================================================================================
//
// シーン2Dの処理 [scene2D.cpp]
// Author : Sato Yoshiki
//
// =====================================================================================================================================================================
#include "scene2D.h"			// インクルードファイル
#include "renderer.h"
#include "manager.h"

// =====================================================================================================================================================================
// マクロ定義
// =====================================================================================================================================================================
#define TEX_POSX			(640)			// 画像のx座標
#define TEX_POSY			(360)			// 画像のy座標
#define TEX_SIZEX			(300 / 2)		// 座標の幅
#define TEX_SIZEY			(220 / 2)		// 座標の高さ

// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CScene2D::CScene2D()
{
}

// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CScene2D::CScene2D(CScene::PRIORITY Priority) :CScene(Priority)
{

}

// =====================================================================================================================================================================
//
// デストラクタ
//
// =====================================================================================================================================================================
CScene2D::~CScene2D()
{
}

// =====================================================================================================================================================================
//
// 初期化処理
//
// =====================================================================================================================================================================
void CScene2D::Init(void)
{
	// 初期化
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);								// 位置
	m_size = D3DXVECTOR3(0.0f, 0.0f, 0.0f);								// 位置
	m_rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);								// 回転

	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = *CManager::GetRenderer()->GetDevice();

	// 頂点バッファの生成
	pDevice->CreateVertexBuffer(sizeof(VERTEX_2D) * 4,					// ←頂点数忘れがち
		D3DUSAGE_WRITEONLY,
		FVF_VERTEX_2D,
		D3DPOOL_MANAGED,
		&m_pVtxBuff,
		NULL);

	VERTEX_2D *pVtx;		// 頂点情報へのポインタ

							// 頂点データの範囲をロックし、頂点バッファへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	pVtx[0].pos = D3DXVECTOR3(m_pos.x - m_size.x, m_pos.y - m_size.y, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(m_pos.x + m_size.x, m_pos.y - m_size.y, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(m_pos.x - m_size.x, m_pos.y + m_size.y, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(m_pos.x + m_size.x, m_pos.y + m_size.y, 0.0f);

	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;

	pVtx[0].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
	pVtx[1].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
	pVtx[2].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
	pVtx[3].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);

	// テクスチャ座標の設定
	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f);

	// 頂点データのアンロック
	m_pVtxBuff->Unlock();
}

// =====================================================================================================================================================================
//
// 終了処理
//
// =====================================================================================================================================================================
void CScene2D::Uninit(void)
{
	// 頂点バッファの開放
	if (m_pVtxBuff != NULL)
	{
		m_pVtxBuff->Release();
		m_pVtxBuff = NULL;
	}
}

// =====================================================================================================================================================================
//
// 更新処理
//
// =====================================================================================================================================================================
void CScene2D::Update(void)
{
	// 頂点情報へのポインタ
	VERTEX_2D *pVtx;

	// 頂点データの範囲をロックし、頂点バッファへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	pVtx[0].pos = D3DXVECTOR3(m_pos.x - m_size.x, m_pos.y - m_size.y, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(m_pos.x + m_size.x, m_pos.y - m_size.y, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(m_pos.x - m_size.x, m_pos.y + m_size.y, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(m_pos.x + m_size.x, m_pos.y + m_size.y, 0.0f);

	// 頂点データのアンロック
	m_pVtxBuff->Unlock();
}

// =====================================================================================================================================================================
//
// 描画処理
//
// =====================================================================================================================================================================
void CScene2D::Draw(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = *CManager::GetRenderer()->GetDevice();

	// 頂点バッファをデバイスのデータストリームにバインド
	pDevice->SetStreamSource(0, m_pVtxBuff, 0, sizeof(VERTEX_2D));

	// 頂点フォーマットの設定
	pDevice->SetFVF(FVF_VERTEX_2D);

	// テクスチャの設定
	pDevice->SetTexture(0, m_pTexture);

	// ポリゴン描画
	pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, NUM_POLYGON);
}

// =====================================================================================================================================================================
//
// アニメーションの設定
//
// =====================================================================================================================================================================
void CScene2D::SetAnim(D3DXVECTOR2 UVsize, D3DXVECTOR2 UV)
{
	// 頂点情報へのポインタ
	VERTEX_2D *pVtx;

	// 頂点データの範囲をロックし、頂点バッファへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	// テクスチャ座標の設定
	pVtx[0].tex = D3DXVECTOR2(UV.x, UV.y);
	pVtx[1].tex = D3DXVECTOR2(UV.x + UVsize.x, UV.y);
	pVtx[2].tex = D3DXVECTOR2(UV.x, UV.y + UVsize.y);
	pVtx[3].tex = D3DXVECTOR2(UV.x + UVsize.x, UV.y + UVsize.y);

	// 頂点データのアンロック
	m_pVtxBuff->Unlock();
}

// =====================================================================================================================================================================
//
// 半径の設定
//
// =====================================================================================================================================================================
void CScene2D::SetRadius(float fRadius)
{
	// 頂点情報へのポインタ
	VERTEX_2D *pVtx;

	// 頂点データの範囲をロックし、頂点バッファへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	// 頂点の設定
	pVtx[0].pos = D3DXVECTOR3(m_pos.x - fRadius, m_pos.y - fRadius, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(m_pos.x + fRadius, m_pos.y - fRadius, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(m_pos.x - fRadius, m_pos.y + fRadius, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(m_pos.x + fRadius, m_pos.y + fRadius, 0.0f);

	// 頂点データのアンロック
	m_pVtxBuff->Unlock();
}

// =====================================================================================================================================================================
//
// 回転の設定
//
// =====================================================================================================================================================================
void CScene2D::SetRotation(float fAngle, float fLength, float fRot)
{
	// 頂点情報へのポインタ
	VERTEX_2D *pVtx;

	// 頂点データの範囲をロックし、頂点バッファへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	// 頂点の設定
	pVtx[0].pos.x = m_pos.x + sinf(-D3DX_PI + fAngle - fRot)	* fLength;
	pVtx[0].pos.y = m_pos.y + cosf(-D3DX_PI + fAngle - fRot)	* fLength;
	pVtx[0].pos.z = 0.0f;

	pVtx[1].pos.x = m_pos.x + sinf(D3DX_PI - fAngle - fRot)	* fLength;
	pVtx[1].pos.y = m_pos.y + cosf(D3DX_PI - fAngle - fRot)	* fLength;
	pVtx[1].pos.z = 0.0f;

	pVtx[2].pos.x = m_pos.x + sinf(-fAngle - fRot)			* fLength;
	pVtx[2].pos.y = m_pos.y + cosf(-fAngle - fRot)			* fLength;
	pVtx[2].pos.z = 0.0f;

	pVtx[3].pos.x = m_pos.x + sinf(fAngle - fRot)			* fLength;
	pVtx[3].pos.y = m_pos.y + cosf(fAngle - fRot)			* fLength;
	pVtx[3].pos.z = 0.0f;

	// 頂点データのアンロック
	m_pVtxBuff->Unlock();
}

// =====================================================================================================================================================================
//
// 色の設定
//
// =====================================================================================================================================================================
void CScene2D::SetCol(D3DXCOLOR col)
{
	// 頂点情報へのポインタ
	VERTEX_2D *pVtx;

	// 頂点データの範囲をロックし、頂点バッファへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	// 頂点カラー												 
	pVtx[0].col = D3DXCOLOR(col);
	pVtx[1].col = D3DXCOLOR(col);
	pVtx[2].col = D3DXCOLOR(col);
	pVtx[3].col = D3DXCOLOR(col);

	// 頂点データのアンロック
	m_pVtxBuff->Unlock();
}

// =====================================================================================================================================================================
//
// 画像の代入
//
// =====================================================================================================================================================================
void CScene2D::BindTexture(LPDIRECT3DTEXTURE9 pTexture)
{
	m_pTexture = pTexture;
}

// =====================================================================================================================================================================
//
// 2Dポリゴンの生成
//
// =====================================================================================================================================================================
CScene2D * CScene2D::Create()
{
	// 変数
	CScene2D *pScene2D;

	// メモリの確保
	pScene2D = new CScene2D(CScene::PRIORITY_UI);

	return pScene2D;
}