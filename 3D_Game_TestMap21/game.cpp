// =====================================================================================================================================================================
//
// ゲームの処理 [game.cpp]
// Author : Sato Yoshiki
//
// =====================================================================================================================================================================
#include "game.h"			// インクルードファイル
#include "player.h"
#include "scene3D.h"
#include "sceneX.h"
#include "slope.h"
#include "score.h"
#include "number.h"
#include "keyboard.h"
#include "fade.h"
#include "gameUI.h"
#include "load.h"
#include "xinputGpad.h"
#include "item.h"
#include "partsmodel.h"
#include "player.h"
#include "motion.h"
#include "wall.h"
#include "objectmodel.h"
#include "map.h"
#include "effect.h"
#include "particle.h"
#include "renderer.h"
#include "camera.h"
#include "object2D.h"
#include "shadow.h"
#include "gameendUI.h"
#include "stencilshadow.h"
#include "meshcylinder.h"

// =====================================================================================================================================================================
// 静的メンバ変数の初期化
// =====================================================================================================================================================================
CScore				*CGame::m_pScore		= NULL;						// スコア
CSlope				*CGame::m_pSlope		= NULL;						// 坂
CScene3D			*CGame::m_pScene3D		= NULL;						// Scene3D
CPlayer				*CGame::m_pPlayer		= NULL;						// プレイヤー
CEffect				*CGame::m_pEffect		= NULL;						// エフェクト
CGameUI				*CGame::m_pGameUI		= NULL;						// ゲームUI
CItem				*CGame::m_pItem			= NULL;						// アイテム
CGame::GAME_MODE	CGame::m_GameMode		= CGame::GAME_MODE_NONE;	// ゲームモード

// =====================================================================================================================================================================
// マクロ定義
// =====================================================================================================================================================================
#define MAX_PARTICLE		(100)						// パーティクル数
#define GAME_END_TIME		(60)						// ゲームが遷移する時間

// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CGame::CGame()
{
}

// =====================================================================================================================================================================
//
// デストラクタ
//
// =====================================================================================================================================================================
CGame::~CGame()
{

}

// =====================================================================================================================================================================
//
// 初期化処理
//
// =====================================================================================================================================================================
HRESULT CGame::Init()
{
	// 初期化
	m_nCntTransition	= 0;									// 遷移するまでの時間
	m_GameMode			= CGame::GAME_MODE_MAIN;				// 現在のゲームモード
	m_bDisplayGameEndUI = true;									// ゲームエンドUIの表示フラグ

	// カメラの初期座標設定
	CManager::GetRenderer()->GetCamera()->SetCameraPosInit();

	// ロード
	LoadAll();

	// マップの読み込み
	CMap::ObjectLoad();
	CMap::ItemLoad();
	CMap::Object2DLoad();
	CMap::SlopeLoad();

	// ゲームUIの生成
	m_pGameUI = CGameUI::Create();
	// スコアの生成
	m_pScore = CScore::Create();
	// プレイヤーの作成
	m_pPlayer = CPlayer::Create();
	// 壁の生成
	CWall::Create(CWall::WALLTYPE::WALL_LEFT);
	CWall::Create(CWall::WALLTYPE::WALL_RIGHT);
	// 影の生成
	//CShadow::Create();

	// 試験的ステンシルシャドウの生成
	//CStencilShadow::Create();
	CMeshCylinder::Create();

#ifdef _DEBUG
	// エフェクトの生成
	m_pEffect = CEffect::Create(D3DXVECTOR3(0.0f, 0.0f, 0.0f), CEffect::EFFECTTYPE_AURA);
#endif
	return S_OK;
}

// =====================================================================================================================================================================
//
// 終了処理
//
// =====================================================================================================================================================================
void CGame::Uninit(void)
{
	// アンロード
	UnloadAll();

	// 全ての開放
	CScene::ReleaseAll();

	CMap::ReleaseMap();

	// スコアの終了
	if (m_pScore != NULL)
	{
		m_pScore->Uninit();
		delete m_pScore;
		m_pScore = NULL;
	}
}

// =====================================================================================================================================================================
//
// 更新処理
//
// =====================================================================================================================================================================
void CGame::Update(void)
{
	// 変数
	CKeyboard	*pKeyboard;
	//CXinputGpad	*pXinputGpad;

	// メモリの確保
	pKeyboard = CManager::GetKeyboard();
	//pXinputGpad = CManager::GetInputGpad();

	// 試験的遷移
	if (m_GameMode == CGame::GAME_MODE_END || m_GameMode == CGame::GAME_MODE_CLEAR)
	{
		// ゲームエンドUIの表示
		if (m_bDisplayGameEndUI)
		{
			// ゲームエンドUIの生成
			CGameEndUI::Create();
			m_bDisplayGameEndUI = false;
		}
		// カウントアップ
		m_nCntTransition++;
	}
	if (m_nCntTransition > GAME_END_TIME)
	{
		if (CFade::GetFadeState() == CManager::NONE)
		{
			// ランキングにセーブ
			CLoad::RankingSave(m_pScore->GetScore());
			m_nCntTransition = 0;
			// リザルトへ遷移
			CFade::SetFade(CManager::RESULT);
		}
	}

#ifdef _DEBUG
	// ゲームへ遷移
	if (pKeyboard->GetKeyboardTrigger(DIK_RETURN)/* || pXinputGpad->GetJoypadPress(0, CXinputGpad::JOYPADKEY_B)*/)
	{
		if (CFade::GetFadeState() == CManager::NONE)
		{
			CFade::SetFade(CManager::RESULT);
		}
	}

	// 試験的配置
	if (pKeyboard->GetKeyboardTrigger(DIK_E))
	{
		for (int nCnt = 0; nCnt < MAX_PARTICLE; nCnt++)
		{
			// パーティクルの生成
			CParticle::Create(D3DXVECTOR3(0.0f, 250.0f, 400.0f), CParticle::PARTICLE_RED);
		}
	}

	// 試験的配置
	if (pKeyboard->GetKeyboardTrigger(DIK_L))
	{
		// プレイヤーの残機アップ
		CGame::GetPlayer()->PlayerRecovery(1);
	}
#endif
}

// =====================================================================================================================================================================
//
// 描画処理
//
// =====================================================================================================================================================================
void CGame::Draw(void)
{	
}

// =====================================================================================================================================================================
//
// ゲームクラスの生成
//
// =====================================================================================================================================================================
CGame * CGame::Create()
{
	// 変数
	CGame *pGame;

	// メモリの確保
	pGame = new CGame;

	// 初期化
	pGame->Init();

	return pGame;
}

// =====================================================================================================================================================================
//
// スコアの取得
//
// =====================================================================================================================================================================
CScore * CGame::GetScore(void)
{
	return m_pScore;
}

// =====================================================================================================================================================================
//
// シーン3Dの取得
//
// =====================================================================================================================================================================
CScene3D * CGame::GetScene3D(void)
{
	return m_pScene3D;
}

// =====================================================================================================================================================================
//
// 坂の取得
//
// =====================================================================================================================================================================
CSlope * CGame::GetSlope(void)
{
	return m_pSlope;
}

// =====================================================================================================================================================================
//
// プレイヤーの取得
//
// =====================================================================================================================================================================
CPlayer * CGame::GetPlayer(void)
{
	return m_pPlayer;
}

// =====================================================================================================================================================================
//
// アイテムの取得
//
// =====================================================================================================================================================================
CItem * CGame::GetItemModel(void)
{
	return m_pItem;
}

// =====================================================================================================================================================================
//
// エフェクトの取得
//
// =====================================================================================================================================================================
CEffect * CGame::GetEffect(void)
{
	return m_pEffect;
}

// =====================================================================================================================================================================
//
// ゲームUIの取得
//
// =====================================================================================================================================================================
CGameUI * CGame::GetGameUI(void)
{
	return m_pGameUI;
}

// =====================================================================================================================================================================
//
// ゲームモードの取得
//
// =====================================================================================================================================================================
CGame::GAME_MODE CGame::GetGameMode(void)
{
	return m_GameMode;
}

// =====================================================================================================================================================================
//
// ロードオール
//
// =====================================================================================================================================================================
void CGame::LoadAll(void)
{
	// ゲームUIの画像読み込み
	CGameUI::Load();
	// ゲームエンドUIの画像読み込み
	CGameEndUI::Load();
	// 坂の画像読み込み
	CSlope::Load();
	// スコアの画像読み込み
	CNumber::Load();
	// アイテムの画像読み込み
	CItem::Load();
	// エフェクトの画像読み込み
	CEffect::Load();
	// 影の画像読み込み
	CShadow::Load();
	// 試験的ステンシルシャドウの画像読み込み
	CStencilShadow::Load();
	// パーティクルの画像読み込み
	CParticle::Load();
	// モーションの読み込み
	CMotion::MotionLoad();
	// パーツモデルの読み込み
	CPartsModel::Load();
	// ウォールの画像読み込み
	CWall::Load();
	// オブジェクトの読み込み
	CObjectModel::Load();
	// 2Dオブジェクトの読み込み
	CObject2D::Load();
}

// =====================================================================================================================================================================
//
// アンロードオール
//
// =====================================================================================================================================================================
void CGame::UnloadAll(void)
{
	// 2Dオブジェクトの画像の破棄
	CObject2D::Unload();
	// オブジェクトの破棄
	CObjectModel::Unload();
	// ウォールの画像の破棄
	CWall::Unload();
	// パーツモデルの破棄
	CPartsModel::Unload();
	// パーティクルの画像の破棄
	CParticle::Unload();
	// 試験的ステンシルシャドウの画像の破棄
	CStencilShadow::Unload();
	// 影の画像の破棄
	CShadow::Unload();
	// エフェクトの画像の破棄
	CEffect::Unload();
	// アイテムの画像の破棄
	CItem::Unload();
	// スコアの画像の破棄
	CNumber::Unload();
	// 坂の画像の破棄
	CSlope::Unload();
	// ゲームエンドUIの画像の破棄
	CGameEndUI::Unload();
	// ゲームUIの画像の破棄
	CGameUI::Unload();
}
