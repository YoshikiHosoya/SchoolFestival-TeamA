// =====================================================================================================================================================================
//
// パーツモデルの処理 [partsmodel.h]
// Author : Sato Yoshiki
//
// =====================================================================================================================================================================
#ifndef _PARTSMODEL_H_
#define _PARTSMODEL_H_

// =====================================================================================================================================================================
// インクルードファイル
// =====================================================================================================================================================================
#include "main.h"
#include "scene.h"
#include "sceneX.h"

// =====================================================================================================================================================================
// 前方宣言
// =====================================================================================================================================================================
class CPlayer;				// プレイヤークラス

// =====================================================================================================================================================================
// パーツモデルクラス
// =====================================================================================================================================================================
class CPartsModel : public CSceneX
{
public:
	CPartsModel();								// コンストラクタ
	virtual ~CPartsModel();						// デストラクタ
	
	/* メンバ関数 */
	void				Init();					// 初期化
	void				Uninit();				// 終了
	void				Update();				// 更新
	void				Draw();					// 描画

	/* 静的メンバ関数 */
	static	CPartsModel		*Create();			// 3Dポリゴンの生成	
	static	HRESULT			Load();				// ロード
	static	void			Unload();			// アンロード

	/* メンバ関数 */
	int						GetIndex()		{ return m_nIndex; };											// インデックスの取得
	int						GetParent()		{ return m_nParent; };											// 親の取得
	void					SetIndex(int nIndex);															// インデックスの設定
	void					SetParent(int nParent)	{ m_nParent = nParent; };								// 親の設定
	void					SetMotionPlayer(int nMotion, int nKeySet);										// プレイヤーのモーション
	void					SetParentWorldMatrix(D3DXMATRIX *pWorldMtx)	{ m_pParentMatrix = pWorldMtx; };	// 親のワールドマトリックス設定

private:
	/* メンバ変数 */
	D3DXMATRIX				*m_pParentMatrix;		// 親モデルへのポインタ
	D3DXVECTOR3				m_Rot1F;				// 1フレームあたりの回転
	int						m_nIndex;				// インデックス
	int						m_nParent;				// 親
	int						m_nFrame;				// フレーム数

	/* 静的メンバ変数 */
	static MODEL_DRAWINFO	m_ModelDrawInfo[PLAYER_PARTS];		// モデルの描画情報
};
#endif
