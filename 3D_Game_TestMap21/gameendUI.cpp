// =====================================================================================================================================================================
//
// ゲームエンドUIの処理 [gameendUI.cpp]
// Author : Sato Yoshiki
//
// =====================================================================================================================================================================
#include "gameendUI.h"			// インクルードファイル
#include "manager.h"
#include "renderer.h"
#include "game.h"

// =====================================================================================================================================================================
// 静的メンバ変数の初期化
// =====================================================================================================================================================================
LPDIRECT3DTEXTURE9	CGameEndUI::m_apTexture[GAMEENDUITYPE::GE_UI_MAX] = {};			// 先頭は型名

// =====================================================================================================================================================================
// マクロ定義
// =====================================================================================================================================================================
#define TEXTURE_FILE00		"data/TEXTURE/haze.png"			// 読み込むテクスチャファイル名	( もや )
#define TEXTURE_FILE01		"data/TEXTURE/clear.png"		// 読み込むテクスチャファイル名	( クリア )
#define TEXTURE_FILE02		"data/TEXTURE/gameend.png"		// 読み込むテクスチャファイル名	( ゲームオーバー )

#define BG_SIZEX			(SCREEN_WIDTH / 2)				// 座標の幅
#define BG_SIZEY			(SCREEN_HEIGHT / 2)				// 座標の高さ

#define LOGO_POSY			(200.0f)						// 座標Y
#define LOGO_SIZEX			(400.0f)						// 座標の幅
#define LOGO_SIZEY			(100.0f)						// 座標の高さ

// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CGameEndUI::CGameEndUI():CScene2D(PRIORITY_UI)
{
}

// =====================================================================================================================================================================
//
// デストラクタ
//
// =====================================================================================================================================================================
CGameEndUI::~CGameEndUI()
{
}

// =====================================================================================================================================================================
//
// 初期化処理
//
// =====================================================================================================================================================================
void CGameEndUI::Init()
{
	for (int nCnt = 0; nCnt < GAMEENDUITYPE::GE_UI_MAX; nCnt++)
	{
		if(m_apScene2D != NULL)
		{ 
			// 変数初期化
			m_UV[nCnt] = D3DXVECTOR3(0.0f, 0.0f, 0.0f);			// 移動

			// シーン2Dの生成
			m_apScene2D[nCnt] = CScene2D::Create();

			// テクスチャの割り当て
			m_apScene2D[nCnt]->BindTexture(m_apTexture[nCnt]);

			// 初期化
			m_apScene2D[nCnt]->Init();
			
			switch (nCnt)
			{
			case GAMEENDUITYPE::GE_UI_HAZE:

				//位置の設定
				m_apScene2D[nCnt]->SetPos(D3DXVECTOR3(BG_SIZEX, BG_SIZEY, 0.0f));
				// サイズの設定
				m_apScene2D[nCnt]->SetSize(D3DXVECTOR3(SCREEN_WIDTH, SCREEN_HEIGHT, 0.0f));
				// 色の設定
				m_apScene2D[nCnt]->SetCol(D3DXCOLOR(1.0f, 1.0f, 1.0f, 0.3f));
				break;

			case GAMEENDUITYPE::GE_UI_CLEAR:

				// ゲームクリアしたとき
				if (CGame::GetGameMode() == CGame::GAME_MODE_CLEAR)
				{
					//位置の設定
					m_apScene2D[nCnt]->SetPos(D3DXVECTOR3(BG_SIZEX, LOGO_POSY, 0.0f));
					// サイズの設定
					m_apScene2D[nCnt]->SetSize(D3DXVECTOR3(LOGO_SIZEX, LOGO_SIZEY, 0.0f));
				}
				break;

			case GAMEENDUITYPE::GE_UI_OVER:

				// ゲームオーバーしたとき
				if (CGame::GetGameMode() == CGame::GAME_MODE_END)
				{
					//位置の設定
					m_apScene2D[nCnt]->SetPos(D3DXVECTOR3(BG_SIZEX, LOGO_POSY, 0.0f));
					// サイズの設定
					m_apScene2D[nCnt]->SetSize(D3DXVECTOR3(LOGO_SIZEX, LOGO_SIZEY, 0.0f));
				}
				break;
			}
		}  
	}
}

// =====================================================================================================================================================================
//
// 終了処理
//
// =====================================================================================================================================================================
void CGameEndUI::Uninit(void)
{
	for (int nCnt = 0; nCnt < GAMEENDUITYPE::GE_UI_MAX; nCnt++)
	{
		if (m_apScene2D != NULL)
		{
			m_apScene2D[nCnt]->Uninit();
		}
	}
}

// =====================================================================================================================================================================
//
// 更新処理
//
// =====================================================================================================================================================================
void CGameEndUI::Update(void)
{
	// 変数
	D3DXVECTOR3 pos;

	for (int nCnt = 0; nCnt < GAMEENDUITYPE::GE_UI_MAX; nCnt++)
	{
		// 更新
		m_apScene2D[nCnt]->Update();
	}
}

// =====================================================================================================================================================================
//
// 描画処理
//
// =====================================================================================================================================================================
void CGameEndUI::Draw(void)
{	
	for (int nCnt = 0; nCnt < GAMEENDUITYPE::GE_UI_MAX; nCnt++)
	{
		if (m_apScene2D != NULL)
		{
			m_apScene2D[nCnt]->Draw();
		}
	}
}

// =====================================================================================================================================================================
//
// ゲームエンドUIの生成
//
// =====================================================================================================================================================================
CGameEndUI * CGameEndUI::Create()
{
	// 変数
	CGameEndUI *pGameEndUI;

	// メモリの確保
	pGameEndUI = new CGameEndUI();

	// 初期化
	pGameEndUI->Init();

	return pGameEndUI;
}

// =====================================================================================================================================================================
//
// ロード
//
// =====================================================================================================================================================================
HRESULT CGameEndUI::Load(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = *CManager::GetRenderer()->GetDevice();

	// テクスチャファイル名
	char *sTextureFileName[GAMEENDUITYPE::GE_UI_MAX]
	{
		{ TEXTURE_FILE00 },		// GE_UI_HAZE		( もや
		{ TEXTURE_FILE01 },		// GE_UI_CLEAR		( クリア
		{ TEXTURE_FILE02 },		// GE_UI_OVER		( ゲームオーバー
	};

	for (int nCntUI = 0; nCntUI < GAMEENDUITYPE::GE_UI_MAX; nCntUI++)
	{
		// テクスチャ読み込み
		D3DXCreateTextureFromFile(pDevice, sTextureFileName[nCntUI], &m_apTexture[nCntUI]);
	}

	for (int nCnt = 0; nCnt < GAMEENDUITYPE::GE_UI_MAX; nCnt++)
	{
		// エラーチェック
		if (m_apTexture[nCnt])
		{
			return E_FAIL;
		}
	}

	return S_OK;
}

// =====================================================================================================================================================================
//
// アンロード
//
// =====================================================================================================================================================================
void CGameEndUI::Unload(void)
{
	for (int nCnt = 0; nCnt < GAMEENDUITYPE::GE_UI_MAX; nCnt++)
	{
		// テクスチャの開放
		if (!m_apTexture)
		{
			m_apTexture[nCnt]->Release();
			m_apTexture[nCnt] = NULL;
		}
	}
}