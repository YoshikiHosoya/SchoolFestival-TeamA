// =====================================================================================================================================================================
//
// フェード処理 [fade.cpp]
// Author : Sato Yoshiki
//
// =====================================================================================================================================================================
#include "fade.h"
#include "renderer.h"

// =====================================================================================================================================================================
// 静的メンバ変数の初期化
// =====================================================================================================================================================================
CFade::FADE					CFade::m_fade = FADE_NONE;				// フェード状態
CManager::MODE				CFade::m_modeNext = CManager::NONE;		// 次の画面（モード）
D3DXCOLOR					CFade::m_colorFade;						// フェード色

// =====================================================================================================================================================================
// マクロ定義
// =====================================================================================================================================================================
#define	TEXTURE_FADE	"data/TEXTURE/fade000.jpg"	// 読み込むテクスチャファイル名

// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CFade::CFade()
{
}

// =====================================================================================================================================================================
//
// デストラクタ
//
// =====================================================================================================================================================================
CFade::~CFade()
{
}

// =====================================================================================================================================================================
//
// 初期化処理
//
// =====================================================================================================================================================================
void CFade::Init(void)
{
	LPDIRECT3DDEVICE9 pDevice = *CManager::GetRenderer()->GetDevice();

	m_fade = FADE_NONE;
	m_colorFade = D3DXCOLOR(0.0f, 0.0f, 0.0f, 0.0f);	// 黒い画面（不透明）

	// テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,				// デバイスへのポインタ
								TEXTURE_FADE,		// ファイルの名前
								&m_pTextureFade);	// 読み込むメモリー

	// 頂点情報の設定
	MakeVertexFade(pDevice);
}

// =====================================================================================================================================================================
//
// 終了処理
//
// =====================================================================================================================================================================
void CFade::Uninit(void)
{
	// テクスチャの開放
	if(m_pTextureFade != NULL)
	{
		m_pTextureFade->Release();
		m_pTextureFade = NULL;
	}

	// 頂点バッファの開放
	if(m_pVtxBuffFade != NULL)
	{
		m_pVtxBuffFade->Release();
		m_pVtxBuffFade = NULL;
	}
}

// =====================================================================================================================================================================
//
// 更新処理
//
// =====================================================================================================================================================================
void CFade::Update(void)
{
	VERTEX_2D *pVtx;

	// 頂点データの範囲をロックし、頂点バッファへのポインタを取得
	m_pVtxBuffFade->Lock(0, 0, (void**)&pVtx, 0);

	if (m_fade != FADE_NONE)
	{
		// フェードイン処理
		if (m_fade == FADE_IN)
		{
			m_colorFade.a -= 0.05f;

			if (m_colorFade.a <= 0.0f)
			{
				// フェード処理終了
				m_colorFade.a = 0.0f;
				m_fade = FADE_NONE;
			}
		}

		// フェードアウト処理
		else if (m_fade == FADE_OUT)
		{
			m_colorFade.a += 0.03f;
			if (m_colorFade.a >= 1.0f)
			{
				// フェードイン処理に切り替え
				m_colorFade.a = 1.0f;
				m_fade = FADE_IN;

				// モードを設定
				CManager::SetMode(m_modeNext);
			}
		}
		// 頂点カラーの設定
		pVtx[0].col = m_colorFade;
		pVtx[1].col = m_colorFade;
		pVtx[2].col = m_colorFade;
		pVtx[3].col = m_colorFade;

		pVtx += 4;
	}
	// 頂点データをアンロックする
	m_pVtxBuffFade->Unlock();
}

// =====================================================================================================================================================================
//
// 描画処理
//
// =====================================================================================================================================================================
void CFade::Draw(void)
{
	LPDIRECT3DDEVICE9 pDevice = *CManager::GetRenderer()->GetDevice();

	// 頂点バッファをデバイスのデータストリームにバインド
	pDevice->SetStreamSource(0, m_pVtxBuffFade, 0, sizeof(VERTEX_2D));

	// 頂点フォーマットの設定
	pDevice->SetFVF(FVF_VERTEX_2D);

	// テクスチャの設定
	pDevice->SetTexture(0, m_pTextureFade);

	// ポリゴンの描画
	pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, NUM_POLYGON);
}

// =====================================================================================================================================================================
//
// 頂点の作成
//
// =====================================================================================================================================================================
void CFade::MakeVertexFade(LPDIRECT3DDEVICE9 pDevice)
{
	VERTEX_2D *pVtx;

	// オブジェクトの頂点バッファを生成
	pDevice->CreateVertexBuffer(sizeof(VERTEX_2D) * 4 ,				// ←頂点数忘れがち
		D3DUSAGE_WRITEONLY,
		FVF_VERTEX_2D,
		D3DPOOL_MANAGED,
		&m_pVtxBuffFade,
		NULL);

	// 頂点データの範囲をロックし、頂点バッファへのポインタを取得
	m_pVtxBuffFade->Lock(0, 0, (void**)&pVtx, 0);

	// 頂点座標の設定
	pVtx[0].pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(SCREEN_WIDTH, 0.0f, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(0.0f, SCREEN_HEIGHT, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(SCREEN_WIDTH, SCREEN_HEIGHT, 0.0f);

	// rhwの設定
	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;

	// 頂点カラーの設定
	pVtx[0].col = m_colorFade;
	pVtx[1].col = m_colorFade;
	pVtx[2].col = m_colorFade;
	pVtx[3].col = m_colorFade;

	// テクスチャ座標の設定
	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f);	

	// 頂点データをアンロックする
	m_pVtxBuffFade->Unlock();
}

// =====================================================================================================================================================================
//
// フェードの生成
//
// =====================================================================================================================================================================
CFade * CFade::Create()
{
	// 変数
	CFade *pFade;

	// メモリの確保
	pFade = new CFade;

	// 初期化
	pFade->Init();

	return pFade;
}

// =====================================================================================================================================================================
//
// フェードの状態設定
//
// =====================================================================================================================================================================
void CFade::SetFade(CManager::MODE modeNext)
{
	m_fade = FADE_OUT;
	m_modeNext = modeNext;
	m_colorFade = D3DXCOLOR(0.0f, 0.0f, 0.0f, 0.0f);
}