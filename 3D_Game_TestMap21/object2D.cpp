// =====================================================================================================================================================================
//
// 2Dオブジェクトの処理 [object2D.cpp]
// Author : Sato Yoshiki
//
// =====================================================================================================================================================================
#include "object2D.h"			// インクルードファイル
#include "manager.h"
#include "renderer.h"
#include "game.h"
#include "debugproc.h"
#include "camera.h"

// =====================================================================================================================================================================
// 静的メンバ変数の初期化
// =====================================================================================================================================================================
LPDIRECT3DTEXTURE9	CObject2D::m_apTexture[OBJECT_2D_TYPE::OBJECT_2D_TYPE_MAX]	= {};				// テクスチャ情報

// =====================================================================================================================================================================
// マクロ定義
// =====================================================================================================================================================================
#define TEXTURE_FILE01		"data/TEXTURE/mural01.png"		// 読み込むテクスチャファイル名			( 床 )
#define TEXTURE_FILE02		"data/TEXTURE/run2D.png"		// 読み込むテクスチャファイル名			( 2Dの看板 )

#define FLOOR_SIZEX			(100 / 2)						// 床の幅
#define FLOOR_SIZEY			(50 / 2)						// 床の高さ

#define SIGNBOARD_2D_SIZEX	(500 / 2)						// 2Dの看板の幅
#define SIGNBOARD_2D_SIZEY	(300 / 2)						// 2Dの看板の高さ

// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CObject2D::CObject2D() :CScene3D(PRIORITY_2DOBJECT)
{
}

// =====================================================================================================================================================================
//
// デストラクタ
//
// =====================================================================================================================================================================
CObject2D::~CObject2D()
{
}

// =====================================================================================================================================================================
//
// 初期化処理
//
// =====================================================================================================================================================================
void CObject2D::Init()
{
	// 変数初期化
	m_size			= D3DXVECTOR3(0.0f, 0.0f, 0.0f);		// サイズ
	m_col			= D3DXCOLOR(0.9f, 0.7f, 0.7f, 1.0f);	// 色
	m_type			= OBJECT_2D_TYPE::OBJECT_2D_TYPE_NONE;	// 2Dオブジェクトの種類

	// 初期化
	CScene3D::Init();
	//色の設定
	CScene3D::SetColor(m_col);
}

// =====================================================================================================================================================================
//
// 終了処理
//
// =====================================================================================================================================================================
void CObject2D::Uninit(void)
{
	CScene3D::Uninit();
}

// =====================================================================================================================================================================
//
// 更新処理
//
// =====================================================================================================================================================================
void CObject2D::Update(void)
{
	// 更新
	CScene3D::Update();

	// テクスチャの分割設定
	CScene3D::SetTexSeparate(1);
}

// =====================================================================================================================================================================
//
// 描画処理
//
// =====================================================================================================================================================================
void CObject2D::Draw(void)
{
	CScene3D::Draw();
}

// =====================================================================================================================================================================
//
// 壁の生成
//
// =====================================================================================================================================================================
CObject2D * CObject2D::Create(D3DXVECTOR3 pos, OBJECT_2D_TYPE type)
{
	// 変数
	CObject2D *pObject2D;

	// メモリの確保
	pObject2D = new CObject2D();

	// 初期化
	pObject2D->Init();

	// ウォール位置の設定
	pObject2D->m_type = type;

	switch (type)
	{
	case CObject2D::OBJECT_2D_TYPE_FLOOR:
		pObject2D->m_size = D3DXVECTOR3(FLOOR_SIZEX, FLOOR_SIZEY, 0.0f);	// サイズ
		break;
	case CObject2D::OBJECT_2D_TYPE_WALL:
		pObject2D->m_size = D3DXVECTOR3(SIGNBOARD_2D_SIZEX, SIGNBOARD_2D_SIZEY, 0.0f);		// サイズ
		break;
	}

	// 両面カリングの設定
	pObject2D->SetBothSideCulling(true);

	// 回転の設定
	pObject2D->SetRot(D3DXVECTOR3(0.0f, -D3DX_PI * 0.5f, 0.0f));

	// サイズの設定
	pObject2D->SetSize(pObject2D->m_size);

	// 位置の設定
	pObject2D->SetPos(pos);

	// テクスチャの割り当て
	pObject2D->BindTexture(m_apTexture[type]);
	
	return pObject2D;
}

// =====================================================================================================================================================================
//
// ロード
//
// =====================================================================================================================================================================
HRESULT CObject2D::Load(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = *CManager::GetRenderer()->GetDevice();

	// テクスチャファイル名
	char *sTextureFileName[OBJECT_2D_TYPE_MAX]
	{
		{ TEXTURE_FILE01 },		// OBJECT_2D_TYPE_FLOOR				( 床
		{ TEXTURE_FILE02 },		// OBJECT_2D_TYPE_WALL				( 2Dの看板
	};

	for (int nCntObject2D = 0; nCntObject2D < OBJECT_2D_TYPE::OBJECT_2D_TYPE_MAX; nCntObject2D++)
	{
		// テクスチャ読み込み
		D3DXCreateTextureFromFile(pDevice, sTextureFileName[nCntObject2D], &m_apTexture[nCntObject2D]);
	}

	return S_OK;
}

// =====================================================================================================================================================================
//  
// アンロード
//
// =====================================================================================================================================================================
void CObject2D::Unload(void)
{
	for (int nCntTex = 0; nCntTex < OBJECT_2D_TYPE::OBJECT_2D_TYPE_MAX; nCntTex++)
	{
		// テクスチャの開放
		if (m_apTexture[nCntTex] != NULL)
		{
			m_apTexture[nCntTex]->Release();
			m_apTexture[nCntTex] = NULL;
		}
	}
}

// =====================================================================================================================================================================
//
// 2Dオブジェクトの当たり判定
//
// =====================================================================================================================================================================
bool CObject2D::CollisionObject2D(D3DXVECTOR3 * pPos, D3DXVECTOR3 * pPosOld, D3DXVECTOR3 * pMove, D3DXVECTOR3 * pSize, CObject2D ** ppObjectRet)
{
	// 変数
	CCamera *pCamera;
	pCamera = CManager::GetRenderer()->GetCamera();	// カメラの情報
	D3DXVECTOR3 pos = CScene3D::GetPos();			// 位置
	bool bLand = false;								// 着地の判定

	// NULLチェック
	if (ppObjectRet != NULL)
	{
		*ppObjectRet = NULL;
	}

	// === カメラのモードが2Dのとき ===
	if (pCamera->GetCameraMode() == CCamera::CAMERA_MODE_2D)
	{
		// ブロックの範囲 ( 縦 )
		if (pos.z - m_size.x < pPos->z + pSize->z &&
			pos.z + m_size.x > pPos->z - pSize->z)
		{
			// ブロックの範囲 ( 高さ )
			if (pos.y - m_size.y <= pPos->y + pSize->y &&
				pos.y + m_size.y > pPos->y)
			{
				// 上の当たり判定
				if (pPos->y < pos.y + m_size.y && pPos->y <= pPosOld->y &&
					pPosOld->y >= pos.y + m_size.y)
				{
					pMove->y = 0.0f;
					pPos->y = pos.y + m_size.y;
					bLand = true;
					*ppObjectRet = this;
				}

				// 左の当たり判定
				else if (pPos->z + pSize->z > pos.z - m_size.x && pPos->z >= pPosOld->z &&
					pPosOld->z + pSize->z <= pos.z - m_size.x)
				{
					pPos->z = pos.z - m_size.x - pSize->z;
					pMove->z = 0;
				}

				// 右の当たり判定
				else if (pPos->z - pSize->z < pos.z + m_size.x && pPos->z <= pPosOld->z &&
					pPosOld->z - pSize->z >= pos.z + m_size.x)
				{
					pPos->z = pos.z + m_size.x + pSize->z;
					pMove->z = 0;
				}

				// 下の当たり判定
				else if (pPos->y + pSize->y > pos.y - m_size.y && pPos->y >= pPosOld->y &&
					pPosOld->y + pSize->y <= pos.y - m_size.y)
				{
					pPos->y = pos.y - m_size.y - pSize->y;
					pMove->y = 0;
				}
			}
		}
	}
	return bLand;
}

// =====================================================================================================================================================================
//  
// 2Dオブジェクトの種類の設定
//
// =====================================================================================================================================================================
void CObject2D::SetObject2DType(OBJECT_2D_TYPE type)
{
	m_type = type;

	// テクスチャの割り当て
	BindTexture(m_apTexture[type]);
}