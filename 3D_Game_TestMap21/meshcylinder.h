// =====================================================================================================================================================================
//
// メッシュシリンダー処理 [meshcylinder.h]
// Author : Sato Yoshiki
//
// =====================================================================================================================================================================
#ifndef _MESHCYLINDER_H_
#define _MESHCYLINDER_H_

#define _CRT_SECURE_NO_WARNINGS

// =====================================================================================================================================================================
// インクルードファイル
// =====================================================================================================================================================================
#include "main.h"
#include "scene.h"

// =====================================================================================================================================================================
// マクロ定義
// =====================================================================================================================================================================
#define POLY_X				(6)								// ポリゴンのブロック数	( 横 )
#define POLY_Z				(1)								// ポリゴンのブロック数	( 縦 )
#define MAX_NOR				((POLY_X * POLY_Z) * 2)			// 法線の最大数

// =====================================================================================================================================================================
// 前方宣言
// =====================================================================================================================================================================

// =====================================================================================================================================================================
// メッシュシリンダークラス
// =====================================================================================================================================================================
class CMeshCylinder : public CScene
{
public:
	
	CMeshCylinder();										// コンストラクタ
	CMeshCylinder(PRIORITY Priority);						// コンストラクタ
	~CMeshCylinder();										// デストラクタ

	/* メンバ関数 */
	void	Init();											// 初期化
	void	Uninit();										// 終了
	void	Update();										// 更新
	void	Draw();											// 描画

	/* 静的メンバ関数 */
	static  CMeshCylinder	*Create();						// メッシュシリンダーの生成
	static	HRESULT			Load();							// ロード
	static	void			Unload();						// アンロード

	/* メンバ関数 */
	void			SetPos(D3DXVECTOR3 pos)			{ m_pos = pos; };			// 位置の設定
	void			SetFieldSize(INTEGER2 size)		{ m_nSize = size; };		// フィールドのサイズの設定
	void			BindTexture(LPDIRECT3DTEXTURE9 pTexture);					// テクスチャの割り当て
	D3DXVECTOR3		GetPos()						{ return m_pos; };			// 位置の取得
	D3DXVECTOR3		GetRot()						{ return m_rot; };			// 回転の取得

private:

	/* メンバ関数 */
	void MakeVertex(LPDIRECT3DDEVICE9 pDevice);					// 頂点作成
	/* 静的メンバ変数 */
	static	LPDIRECT3DTEXTURE9		m_pTexture;					// テクスチャへのポインタ

	/* メンバ変数 */
	LPDIRECT3DVERTEXBUFFER9			m_pVtxBuff = NULL;			// 頂点バッファへのポインタ
	LPDIRECT3DINDEXBUFFER9			m_pIdxBuff = NULL;			// インデックスバッファへのポインタ
	D3DXVECTOR3						m_pos;						// ポリゴンの位置
	D3DXVECTOR3						m_rot;						// ポリゴンの向き ( 回転 ) 
	D3DXCOLOR						m_col;						// 色
	D3DXMATRIX						m_mtxWorld;					// ワールドマトリックス
	int								m_nNumVertex;				// 総頂点数
	int								m_nNumIndex;				// 総インデックス数
	int								m_nNumPolygon;				// 総ポリゴン数
	INTEGER2						m_nSize;					// フィールドのサイズ
	D3DXVECTOR3						m_aNor[MAX_NOR];			// 法線

	void SetCylinderCol(D3DXCOLOR col);
};
#endif
