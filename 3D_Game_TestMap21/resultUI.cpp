// =====================================================================================================================================================================
//
// リザルトUIの処理 [resultUI.cpp]
// Author : Sato Yoshiki
//
// =====================================================================================================================================================================
#include "resultUI.h"			// インクルードファイル
#include "manager.h"
#include "renderer.h"

// =====================================================================================================================================================================
// 静的メンバ変数の初期化
// =====================================================================================================================================================================
LPDIRECT3DTEXTURE9	CResultUI::m_apTexture[RESULTUITYPE::R_UI_MAX] = {};			// 先頭は型名

// =====================================================================================================================================================================
// マクロ定義
// =====================================================================================================================================================================
#define TEXTURE_FILE00		"data/TEXTURE/over.png"			// 読み込むテクスチャファイル名
#define TEXTURE_FILE01		"data/TEXTURE/enter.png"		// 読み込むテクスチャファイル名
#define TEXTURE_FILE02		"data/TEXTURE/maou00.png"		// 読み込むテクスチャファイル名

#define BG_SIZEX			(SCREEN_WIDTH / 2)				// 座標の幅
#define BG_SIZEY			(SCREEN_HEIGHT / 2)				// 座標の高さ

#define LOGO_POSY			(200.0f)						// 座標Y
#define LOGO_SIZEX			(400.0f)						// 座標の幅
#define LOGO_SIZEY			(100.0f)						// 座標の高さ

#define ENTER_POSY			(600.0f)						// 座標Y
#define ENTER_SIZEX			(200.0f)						// 座標の幅
#define ENTER_SIZEY			(50.0f)							// 座標の高さ

#define MAOU_POSX			(1230.0f)						// 座標X
#define MAOU_POSY			(710.0f)						// 座標Y
#define MAOU_SIZEX			(50.0f)							// 座標の幅
#define MAOU_SIZEY			(10.0f)							// 座標の高さ

// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CResultUI::CResultUI():CScene2D(PRIORITY_UI)
{
}

// =====================================================================================================================================================================
//
// デストラクタ
//
// =====================================================================================================================================================================
CResultUI::~CResultUI()
{
}

// =====================================================================================================================================================================
//
// 初期化処理
//
// =====================================================================================================================================================================
void CResultUI::Init()
{
	for (int nCnt = 0; nCnt < RESULTUITYPE::R_UI_MAX; nCnt++)
	{
		if(m_apScene2D != NULL)
		{ 
			// 変数初期化
			m_UV[nCnt] = D3DXVECTOR3(0.0f, 0.0f, 0.0f);			// 移動

			// シーン2Dの生成														// CScene2Dは = の形で生成する ( リターンが行われなくなるため )
			m_apScene2D[nCnt] = CScene2D::Create();

			// テクスチャの割り当て
			m_apScene2D[nCnt]->BindTexture(m_apTexture[nCnt]);

			// 初期化
			m_apScene2D[nCnt]->Init();
			
			switch (nCnt)
			{
			case RESULTUITYPE::R_UI_LOGO:

				//位置の設定
				m_apScene2D[nCnt]->SetPos(D3DXVECTOR3(BG_SIZEX, LOGO_POSY, 0.0f));
				// サイズの設定
				m_apScene2D[nCnt]->SetSize(D3DXVECTOR3(LOGO_SIZEX, LOGO_SIZEY, 0.0f));
				break;

			case RESULTUITYPE::R_UI_ENTER:

				//位置の設定
				m_apScene2D[nCnt]->SetPos(D3DXVECTOR3(BG_SIZEX, ENTER_POSY, 0.0f));
				// サイズの設定
				m_apScene2D[nCnt]->SetSize(D3DXVECTOR3(ENTER_SIZEX, ENTER_SIZEY, 0.0f));
				break;

			case RESULTUITYPE::R_UI_MAOU:

				//位置の設定
				m_apScene2D[nCnt]->SetPos(D3DXVECTOR3(MAOU_POSX, MAOU_POSY, 0.0f));
				// サイズの設定
				m_apScene2D[nCnt]->SetSize(D3DXVECTOR3(MAOU_SIZEX, MAOU_SIZEY, 0.0f));
				break;
			}
		}  
	}
}

// =====================================================================================================================================================================
//
// 終了処理
//
// =====================================================================================================================================================================
void CResultUI::Uninit(void)
{
	for (int nCnt = 0; nCnt < RESULTUITYPE::R_UI_MAX; nCnt++)
	{
		if (m_apScene2D != NULL)
		{
			m_apScene2D[nCnt]->Uninit();
		}
	}
}

// =====================================================================================================================================================================
//
// 更新処理
//
// =====================================================================================================================================================================
void CResultUI::Update(void)
{
	// 変数
	D3DXVECTOR3 pos;

	for (int nCnt = 0; nCnt < RESULTUITYPE::R_UI_MAX; nCnt++)
	{
		// 更新
		m_apScene2D[nCnt]->Update();
	}
}

// =====================================================================================================================================================================
//
// 描画処理
//
// =====================================================================================================================================================================
void CResultUI::Draw(void)
{	
	for (int nCnt = 0; nCnt < RESULTUITYPE::R_UI_MAX; nCnt++)
	{
		if (m_apScene2D != NULL)
		{
			m_apScene2D[nCnt]->Draw();
		}
	}
}

// =====================================================================================================================================================================
//
// リザルトUIの生成
//
// =====================================================================================================================================================================
CResultUI * CResultUI::Create()
{
	// 変数
	CResultUI *pResultUI;

	// メモリの確保
	pResultUI = new CResultUI();

	// 初期化
	pResultUI->Init();

	return pResultUI;
}

// =====================================================================================================================================================================
//
// ロード
//
// =====================================================================================================================================================================
HRESULT CResultUI::Load(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = *CManager::GetRenderer()->GetDevice();

	// テクスチャファイル名
	char *sTextureFileName[R_UI_MAX]
	{
		{ TEXTURE_FILE00 },		// R_UI_LOGO		( ロゴ
		{ TEXTURE_FILE01 },		// R_UI_ENTER		( ENTER
		{ TEXTURE_FILE02 },		// R_UI_MAOU		( 魔王魂
	};

	for (int nCntUI = 0; nCntUI < R_UI_MAX; nCntUI++)
	{
		// テクスチャ読み込み
		D3DXCreateTextureFromFile(pDevice, sTextureFileName[nCntUI], &m_apTexture[nCntUI]);
	}

	for (int nCnt = 0; nCnt < R_UI_MAX; nCnt++)
	{
		// エラーチェック
		if (m_apTexture[nCnt] == NULL)
		{
			return E_FAIL;
		}
	}

	return S_OK;
}

// =====================================================================================================================================================================
//
// アンロード
//
// =====================================================================================================================================================================
void CResultUI::Unload(void)
{
	for (int nCnt = 0; nCnt < RESULTUITYPE::R_UI_MAX; nCnt++)
	{
		// テクスチャの開放
		if (m_apTexture != NULL)
		{
			m_apTexture[nCnt]->Release();
			m_apTexture[nCnt] = NULL;
		}
	}
}