//------------------------------------------------------------------------------
//
//タイマー処理  [tiemr.cpp]
//Author:Yoshiki Hosoya
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//インクルード
//------------------------------------------------------------------------------
#include "timer.h"
#include "game.h"
#include "manager.h"
#include "scene2D.h"
#include "multinumber.h"
//------------------------------------------------------------------------------
//静的メンバ変数の初期化
//------------------------------------------------------------------------------
int CTimer::m_nTimer = 0;
//------------------------------------------------------------------------------
//コンストラクタ
//------------------------------------------------------------------------------
CTimer::CTimer()
{
	m_nTimer = 0;
	m_nCntFlame = 0;
	m_bStop = false;
	m_pMultiNumber.reset();
}
//------------------------------------------------------------------------------
//デストラクタ
//------------------------------------------------------------------------------
CTimer::~CTimer()
{
	m_pMultiNumber.reset();
}

//------------------------------------------------------------------------------
//初期化処理
//------------------------------------------------------------------------------
HRESULT CTimer::Init()
{
	return S_OK;
}
//------------------------------------------------------------------------------
//終了処理
//------------------------------------------------------------------------------
void CTimer::Uninit()
{

}
//------------------------------------------------------------------------------
//更新処理
//------------------------------------------------------------------------------
void CTimer::Update()
{
	//タイマーが動いている時
	if (m_nTimer > 0 && m_bStop == false)
	{
		//フレーム加算
		m_nCntFlame++;

		//1秒おき
		if (m_nCntFlame % 60 == 0)
		{
			//タイマーカウントダウン
			m_nTimer--;

			//残り時間に応じて色を変化
			//残り0秒
			if (m_nTimer <= 0)
			{
				//赤
				m_pMultiNumber->SetCol(D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f));
				//タイマーストップ
				m_nTimer = 0;
				//タイムオーバー
				CManager::GetGame()->SetGamestate(CGame::STATE_GAMECLEAR);
			}
			//残り10秒
			else if (m_nTimer == 10)
			{
				//オレンジ
				m_pMultiNumber->SetCol(D3DXCOLOR(1.0f, 0.5f, 0.0f, 1.0f));
			}

			//残り60秒
			else if (m_nTimer == 30)
			{
				//黄
				m_pMultiNumber->SetCol(D3DXCOLOR(1.0f, 1.0f, 0.2f, 1.0f));
			}
			//UV設定
			m_pMultiNumber->SetMultiNumber(m_nTimer);
		}
	}
}
//------------------------------------------------------------------------------
//描画処理
//------------------------------------------------------------------------------
void CTimer::Draw()
{

}
//------------------------------------------------------------------------------
//デバッグ情報表示
//------------------------------------------------------------------------------
void CTimer::ShowDebugInfo()
{
#ifdef _DEBUG

#endif //_DEBUG
}
//------------------------------------------------------------------------------
//生成処理
//------------------------------------------------------------------------------
std::unique_ptr<CTimer> CTimer::Create(D3DXVECTOR3 pos,int nTimer)
{
	//メモリ確保
	std::unique_ptr<CTimer>pTimer(new CTimer);

	//初期化処理
	pTimer->Init();

	//時間設定
	m_nTimer = nTimer;

	//生成
	pTimer->m_pMultiNumber = CMultiNumber::Create(pos, D3DXVECTOR3(45.0f, 90.0f, 0.0f), nTimer, 3,CScene::OBJTYPE_NUMBER);

	//リターン
	return pTimer;
}
//------------------------------------------------------------------------------
//時間取得
//------------------------------------------------------------------------------
int CTimer::GetTimer()
{
	return m_nTimer;
}
//------------------------------------------------------------------------------
//タイマーストップ
//------------------------------------------------------------------------------
void CTimer::StopTimer()
{
	m_bStop = true;
}