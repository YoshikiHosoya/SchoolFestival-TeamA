// =====================================================================================================================================================================
//
// 障害物の処理 [Obstacle.cpp]
// Author : fujiwara masato
//
// =====================================================================================================================================================================
#include "Obstacle.h"
#include "manager.h"
#include "renderer.h"
#include "game.h"
#include "debugproc.h"
#include "collision.h"

// =====================================================================================================================================================================
// 静的メンバ変数の初期化
// =====================================================================================================================================================================
OBSTACLE_PARAM	CObstacle::m_ObstacleParam[CObstacle::TYPE_MAX] = {};

// =====================================================================================================================================================================
// マクロ定義
// =====================================================================================================================================================================
#define OBSTACLE_BOX_COLLISION			(D3DXVECTOR3(50.0f,50.0f,0.0f))		// 障害物の判定の大きさ

// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CObstacle::CObstacle(OBJ_TYPE type) :CModel(type)
{
	// 変数初期化
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);		// 移動値
	m_nLife = 0;								// 体力
}

// =====================================================================================================================================================================
//
// デストラクタ
//
// =====================================================================================================================================================================
CObstacle::~CObstacle()
{
}

// =====================================================================================================================================================================
//
// 初期化処理
//
// =====================================================================================================================================================================
HRESULT CObstacle::Init()
{
	// タイプの初期化
	m_ObstacleType = TYPE_BOX;

	// 初期化
	CModel::Init();

	// 情報の設定
	SetObstacleParam(TYPE_BOX);

	// 当たり判定生成
	GetCollision()->SetPos(&GetPosition());
	GetCollision()->SetSize2D(OBSTACLE_BOX_COLLISION);
	GetCollision()->SetMove(nullptr);
	GetCollision()->SetType(CCollision::COLLISION_OBSTACLE);
	GetCollision()->DeCollisionCreate(CCollision::COLLISIONTYPE_NORMAL);

	return S_OK;
}

// =====================================================================================================================================================================
//
// 終了処理
//
// =====================================================================================================================================================================
void CObstacle::Uninit(void)
{
	// 終了
	CModel::Uninit();
}

// =====================================================================================================================================================================
//
// 更新処理
//
// =====================================================================================================================================================================
void CObstacle::Update(void)
{
	if (GetCollision() != nullptr)
	{
		//座標の更新
		GetCollision()->SetPos(&GetPosition());
	}
	// 更新
	CModel::Update();
}

// =====================================================================================================================================================================
//
// 描画処理
//
// =====================================================================================================================================================================
void CObstacle::Draw(void)
{
	// 描画
	CModel::Draw();
}
// =====================================================================================================================================================================
//
// デバッグ
//
// =====================================================================================================================================================================
void CObstacle::DebugInfo()
{
}

// =====================================================================================================================================================================
//
// 銃の生成
//
// =====================================================================================================================================================================
CObstacle * CObstacle::Create()
{
	// 変数
	CObstacle *pObstacle;

	// メモリの確保
	pObstacle = new CObstacle(OBJTYPE_OBSTACLE);

	// 初期化
	pObstacle->Init();

	// モデルタイプの設定
	pObstacle->SetType(OBSTACLE_MODEL);

	return pObstacle;
}

// =====================================================================================================================================================================
//
// 障害物が壊されるときの処理
//
// =====================================================================================================================================================================
void CObstacle::Hit(OBSTACLE_TYPE type,int nDamage)
{
	switch (type)
	{
	case CObstacle::TYPE_BOX:
		// 体力を減算する
		this->AddDamage(nDamage);
		// 削除する
		this->CheckDie();
		break;
	default:
		break;
	}
}

// =====================================================================================================================================================================
//
// 障害物を破壊するか決める処理
//
// =====================================================================================================================================================================
void CObstacle::CheckDie()
{
	if (this->m_nLife <= 0)
	{
		//m_pCollision = nullptr;
		// 体力が0以下なら削除する
		Rerease();
	}
}
//====================================================================
//ダメージを受けた時の処理
//====================================================================
void CObstacle::AddDamage(int nDamage)
{
	this->m_nLife -= nDamage;
	this->SetLife(m_nLife);
}
