// =====================================================================================================================================================================
//
// マップの処理 [map.h]
// Author : Sato Yoshiki
//
// =====================================================================================================================================================================
#ifndef _MAP_H_
#define _MAP_H_

// =====================================================================================================================================================================
// インクルードファイル
// =====================================================================================================================================================================
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "model.h"
#include "Scene.h"
#include "inputKeyboard.h"

// =====================================================================================================================================================================
// 前方宣言
// =====================================================================================================================================================================
class CModel;
class CEnemy;

// =====================================================================================================================================================================
// マップクラス
// =====================================================================================================================================================================
class CMap
{
public:
	// マップのオブジェクトの種類
	enum MAP
	{
		MAP_1,			// 1
		MAP_2,			// 2
		MAP_MAX
	};

	CMap();									// コンストラクタ
	~CMap();								// デストラクタ

	/* 静的メンバ関数 */
	void			ModelLoad(int nCnt);							// モデルのロード
	void			EnemyLoad(int nCnt);							// 敵のロード
	void			DebugMap();								// マップのデバッグ配置
	static	CMap	*MapCreate(int nCnt);					// マップの生成

	/* メンバ関数 */
	int				GetMaxModel();										// モデルの最大数取得
	LPD3DXMESH		GetMesh(int nCnt);									// メッシュの取得
	CModel			*GetModel(int nCnt) { return m_pModel[nCnt]; };		// モデルの取得
	CEnemy			*GetEnemy(int nCnt) { return m_pEnemy[nCnt]; };		// 敵の取得

private:
	/* 静的メンバ関数 */
	void	ModelSave();							// モデルのセーブ
	void	EnemySave();							// 敵のセーブ

	/* 静的メンバ変数 */
	static char					*m_MapFileName[MAP_MAX];	// マップファイル名
	static char					*m_EnemyFileName[MAP_MAX];	// 敵ファイル名

	/* メンバ変数 */
	std::vector<CModel*> m_pModel;					// 可変長配列 設置するモデル
	std::vector<CEnemy*> m_pEnemy;					// 可変長配列 設置したエネミー
};
#endif