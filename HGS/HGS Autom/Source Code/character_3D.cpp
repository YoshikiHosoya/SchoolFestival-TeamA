//------------------------------------------------------------------------------
//
//3Dキャラクター処理  [character_3D.cpp]
//Author:Yoshiki Hosoya
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//インクルード
//------------------------------------------------------------------------------
#include "character_3D.h"
#include "manager.h"
#include "renderer.h"
#include "modelcharacter.h"
#include "Map.h"
//------------------------------------------------------------------------------
//静的メンバ変数の初期化
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
//マクロ
//------------------------------------------------------------------------------
#define INERTIA	(0.2f)			//摩擦
#define AIR_INERTIA (0.05f)		//空中時の摩擦
#define GRAVITY (0.7f)			//重力
//------------------------------------------------------------------------------
//コンストラクタ
//------------------------------------------------------------------------------
CCharacter_3D::CCharacter_3D()
{
	m_pModelCharacter = nullptr;
	D3DXMatrixIdentity(&m_mtxWorld);
	m_rotDest = ZeroVector3;
	m_rotDif = ZeroVector3;

}

//------------------------------------------------------------------------------
//デストラクタ
//------------------------------------------------------------------------------
CCharacter_3D::~CCharacter_3D()
{
	if (m_pModelCharacter)
	{
		m_pModelCharacter.reset();
	}
}
//------------------------------------------------------------------------------
//初期化処理
//------------------------------------------------------------------------------
HRESULT CCharacter_3D::Init()
{

	//成功
	return S_OK;
}
//------------------------------------------------------------------------------
//終了処理
//------------------------------------------------------------------------------
void CCharacter_3D::Uninit()
{

}
//------------------------------------------------------------------------------
//更新処理
//------------------------------------------------------------------------------
void CCharacter_3D::Update()
{
	//移動処理
	Move();

	//回転処理
	Rot();

	//ワールドマトリックスの計算
	CHossoLibrary::CalcMatrix(&m_mtxWorld, GetPos(), GetRot());

	//当たり判定
	Collision();

	//ステートに応じた処理
	State();

	//モデルの動きの更新
	m_pModelCharacter->Update();

	//ワールドマトリックスの計算
	CHossoLibrary::CalcMatrix(&m_mtxWorld, GetPos(), GetRot());

}
//------------------------------------------------------------------------------
//描画処理
//------------------------------------------------------------------------------
void CCharacter_3D::Draw()
{
	//モデルの描画
	m_pModelCharacter->Draw();
}
//------------------------------------------------------------------------------
//デバッグ情報表記
//------------------------------------------------------------------------------
void CCharacter_3D::ShowDebugInfo()
{
#ifdef _DEBUG

#endif //DEBUG
}


//------------------------------------------------------------------------------
//ステート設定
//------------------------------------------------------------------------------
void CCharacter_3D::SetState(STATE nextstate)
{
	CCharacter::SetState(nextstate);
}
//------------------------------------------------------------------------------
//現在のモーション取得
//------------------------------------------------------------------------------
CMotion::MOTION_TYPE CCharacter_3D::GetNowMotion()
{
	return m_pModelCharacter->GetMotion();
}

//------------------------------------------------------------------------------
//キャラクター情報表示
//------------------------------------------------------------------------------
void CCharacter_3D::ShowCharacterInfo()
{
#ifdef _DEBUG

#endif //DEBUG
}
//------------------------------------------------------------------------------
//モーション切り替え
//------------------------------------------------------------------------------
void CCharacter_3D::ChangeMotion(CMotion::MOTION_TYPE nextmotion)
{
	//モーションが切り替わった時
	if (GetNowMotion() != nextmotion)
	{
		//モーション切り替え
		m_pModelCharacter->SetMotion(nextmotion);
	}
}

//------------------------------------------------------------------------------
//モーション切り替え
//------------------------------------------------------------------------------
bool CCharacter_3D::ContinueAttack()
{
	//最終キーだった場合
	if (m_pModelCharacter->GetKey() + 1 == CMotion::GetNumKey(m_pModelCharacter->GetMotion()))
	{
		return true;
	}
	return false;
}
//------------------------------------------------------------------------------
//移動処理
//------------------------------------------------------------------------------
void CCharacter_3D::Move()
{
	if(GetGravity())
	{
		//重力加算
		GetMove().y -= GRAVITY;
	}

	//移動量加算
	GetPos() += GetMove();

	//空中時
	if (GetJump())
	{
		//慣性
		GetMove().x += (0 - GetMove().x) * AIR_INERTIA;
		GetMove().z += (0 - GetMove().z) * AIR_INERTIA;
	}
	//それ以外
	else
	{
		//慣性
		GetMove().x += (0 - GetMove().x) * INERTIA;
		GetMove().z += (0 - GetMove().z) * INERTIA;
	}
}
//------------------------------------------------------------------------------
//回転処理
//------------------------------------------------------------------------------
void CCharacter_3D::Rot()
{
	//回転の差分を求める
	m_rotDif.y = m_rotDest.y - GetRot().y;

	//3.14以内にする
	CHossoLibrary::CalcRotation(m_rotDif.y);

	//モデルの回転させる
	GetRot().y += m_rotDif.y * 0.3f;

	//3.14以内にする
	CHossoLibrary::CalcRotation(GetRot().y);
}

//------------------------------------------------------------------------------
//当たり判定
//------------------------------------------------------------------------------
void CCharacter_3D::Collision()
{
	bool bJump = true;

	//フィールドのサイズ取得
	D3DXVECTOR3 FieldSize = CMap::GetFieldSize() * 0.5f;

	//フィールド外に出れないようにする
	CHossoLibrary::RangeLimit_Equal_Float(GetPos().x, -FieldSize.x, FieldSize.x);
	CHossoLibrary::RangeLimit_Equal_Float(GetPos().z, -FieldSize.z, FieldSize.z);

	//範囲から出ないようにする
	if (GetPos().y < 0)
	{
		//↓方向の力を消す
		GetMove().y = 0;

		//0の位置に合わす
		GetPos().y = 0;

		//ジャンプ状態解除
		bJump = false;
	}

	//ジャンプ状態設定
	SetJump(bJump);
}
//------------------------------------------------------------------------------
//状態に応じた処理
//------------------------------------------------------------------------------
void CCharacter_3D::State()
{

}

//------------------------------------------------------------------------------
//モデルキャラクター生成
//------------------------------------------------------------------------------
void CCharacter_3D::CreateModelCharacter(int type)
{
	//モデルキャラクター生成
	m_pModelCharacter = CModelCharacter::Create((CModelCharacter::CHARACTER_TYPE)type);

	//マトリックス設定
	m_pModelCharacter->SetCharacterMtx(&m_mtxWorld);
}
