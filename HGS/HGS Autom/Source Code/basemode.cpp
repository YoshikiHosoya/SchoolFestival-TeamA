//-----------------------------------------------------------------------------
//
// モードの規定クラス [basemode.cpp]
// Author : Yoshiki Hosoya
//
//-----------------------------------------------------------------------------
#include "basemode.h"
#include "modelcharacter.h"
#include "character.h"
#include "particle.h"
#include "manager.h"
#include "renderer.h"
#include "fade.h"
#include "keyboard.h"
#include "sound.h"
#include "modelinfo.h"
//-----------------------------------------------------------------------------
//デバッグコマンド
//-----------------------------------------------------------------------------
void CBaseMode::DebugCommand()
{
	//キーボード取得
	CKeyboard *pKeyboard = CManager::GetKeyboard();

	//使い方説明
	CDebugProc::Print(CDebugProc::PLACE_LEFT, "--------------------Debug Command--------------------\n");
	CDebugProc::Print(CDebugProc::PLACE_LEFT, "[F3] : 一時停止\n");
	CDebugProc::Print(CDebugProc::PLACE_LEFT, "[F4] : 一時停止中に1Fだけ更新\n");
	CDebugProc::Print(CDebugProc::PLACE_LEFT, "[F5] : DebugProc表記 on/off\n");
	CDebugProc::Print(CDebugProc::PLACE_LEFT, "[F6] : ImGui表記 on/off\n");
	CDebugProc::Print(CDebugProc::PLACE_LEFT, "[F8] : ミュート on/off\n");

	CDebugProc::Print(CDebugProc::PLACE_LEFT, "[Ctrl] + テンキー [0] : 現在のModeに遷移\n");
	CDebugProc::Print(CDebugProc::PLACE_LEFT, "[Ctrl] + テンキー [1] : Titleに遷移\n");
	CDebugProc::Print(CDebugProc::PLACE_LEFT, "[Ctrl] + テンキー [2] : Tutorialに遷移\n");
	CDebugProc::Print(CDebugProc::PLACE_LEFT, "[Ctrl] + テンキー [3] : 2DGameに遷移\n");
	CDebugProc::Print(CDebugProc::PLACE_LEFT, "[Ctrl] + テンキー [4] : Resultに遷移\n");
	CDebugProc::Print(CDebugProc::PLACE_LEFT, "[Ctrl] + テンキー [5] : Rankingに遷移\n");
	CDebugProc::Print(CDebugProc::PLACE_LEFT, "[Ctrl] + テンキー [8] : EffectViewerに遷移\n");
	//CDebugProc::Print(CDebugProc::PLACE_LEFT, "[Ctrl] + テンキー [9] : MotionViewerに遷移\n");


	//一時停止
	if (pKeyboard->GetTrigger(DIK_F3))
	{
		CScene::SetStop(CScene::GetStop() ^ 1);
	}

	//1Fだけ更新
	if (pKeyboard->GetTrigger(DIK_F4))
	{
		CScene::Set1FAction();
	}

	//デバッグ表記on/off
	if (pKeyboard->GetTrigger(DIK_F5))
	{
		CManager::GetRenderer()->SetDispDebugProcInfo(CManager::GetRenderer()->CheckShowDebugProcInfo() ^ 1);
	}

	//ImGui表記on/off
	if (pKeyboard->GetTrigger(DIK_F6))
	{
		CManager::GetRenderer()->SetDispImGuiInfo(CManager::GetRenderer()->CheckShowImGuiInfo() ^ 1);
	}

	//ミュート表記on/off
	if (pKeyboard->GetTrigger(DIK_F8))
	{
		CManager::GetSound()->SetMute(CManager::GetSound()->GetMute() ^ 1);
	}

	//Ctrl押しながら
	if (pKeyboard->GetPress(DIK_LCONTROL))
	{
		//現在のモード再始動
		if (pKeyboard->GetTrigger(DIK_NUMPAD0))
		{
			CManager::GetRenderer()->GetFade()->SetModeFade(CManager::GetMode());
		}
		//タイトル
		if (pKeyboard->GetTrigger(DIK_NUMPAD1))
		{
			CManager::GetRenderer()->GetFade()->SetModeFade(CManager::MODE_TITLE);
		}
		//チュートリアル
		if (pKeyboard->GetTrigger(DIK_NUMPAD2))
		{
			CManager::GetRenderer()->GetFade()->SetModeFade(CManager::MODE_TUTORIAL);
		}
		//ゲーム
		if (pKeyboard->GetTrigger(DIK_NUMPAD3))
		{
			CManager::GetRenderer()->GetFade()->SetModeFade(CManager::MODE_2DGAME);
		}
		//リザルト
		if (pKeyboard->GetTrigger(DIK_NUMPAD4))
		{
			CManager::GetRenderer()->GetFade()->SetModeFade(CManager::MODE_RESULT);
		}
		//ランキング
		if (pKeyboard->GetTrigger(DIK_NUMPAD5))
		{
			CManager::GetRenderer()->GetFade()->SetModeFade(CManager::MODE_RANKING);
		}

		//エフェクトビューワ
		if (pKeyboard->GetTrigger(DIK_NUMPAD8))
		{
			CManager::GetRenderer()->GetFade()->SetModeFade(CManager::MODE_EFFECTVIEWER);
		}
		////モーションビューワ
		//if (pKeyboard->GetTrigger(DIK_NUMPAD9))
		//{
		//	CManager::GetRenderer()->GetFade()->SetModeFade(CManager::MODE_TITLE);
		//}
	}

	//デバッグ情報表記
	//オーバーライド用　それぞれのモードで処理
	ShowDebugInfo();
}
//-----------------------------------------------------------------------------
//使うテクスチャやモデルの読み込み
//-----------------------------------------------------------------------------
void CBaseMode::BaseLoad(HWND hWnd)
{
	//テクスチャロード
	CTexture::TexLoad(hWnd);
	CModelInfo::ModelLoad(hWnd);

	//モデル読み込み
	if (FAILED(CModelCharacter::Load()))
	{
		//失敗
		MessageBox(hWnd, "モデル情報読み込み失敗", "CModelCharacter", MB_OK | MB_ICONHAND);
	}

	//モーション読み込み
	if (FAILED(CMotion::Load()))
	{
		//失敗
		MessageBox(hWnd, "モーション読み込み失敗", "CMotion", MB_OK | MB_ICONHAND);
	}

	//キャラクターの初期パラメータ読み込み
	if (FAILED(CCharacter::LoadDefaultParam()))
	{
		//失敗
		MessageBox(hWnd, "パラメータ読み込み失敗", "CCharacter", MB_OK | MB_ICONHAND);
	}

	//パーティクルのテクスチャと頂点確報
	if (FAILED(CParticle::MakeVertex()))
	{
		//失敗
		MessageBox(hWnd, "テクスチャ読み込み失敗", "CParticle", MB_OK | MB_ICONHAND);
	}
	//パーティクルのテクスチャと頂点確報
	if (FAILED(CParticleParam::LoadParticleDefaultParam()))
	{
		//失敗
		MessageBox(hWnd, "テクスチャ読み込み失敗", "CParticle", MB_OK | MB_ICONHAND);
	}
}

//-----------------------------------------------------------------------------
//生成したものを全て破棄
//----------------------------------------------------------------------------
void CBaseMode::BaseUnload()
{
	//テクスチャ破棄
	CTexture::TexUnload();

	//モデルに関するもの
	CModelCharacter::UnLoad();
	CMotion::UnLoad();

	//パーティクルの頂点情報開放
	CParticle::ReleaseVertex();

}
