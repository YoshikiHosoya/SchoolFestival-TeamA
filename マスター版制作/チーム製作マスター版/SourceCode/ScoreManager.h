// =====================================================================================================================================================================
//
// スコアマネージャーの処理 [scoremanager.h]
// Author : fujiwara masato
//
// =====================================================================================================================================================================
#ifndef _SCOREMANAGER_H_
#define _SCOREMANAGER_H_

// =====================================================================================================================================================================
// インクルードファイル
// =====================================================================================================================================================================
#include "main.h"

// =====================================================================================================================================================================
// マクロ定義
// =====================================================================================================================================================================

// =====================================================================================================================================================================
// アイテムのデータ
// =====================================================================================================================================================================
typedef struct
{
	int					nBear;		// 熊のアイテム
	int					nCoin;		// コインのアイテム
	int					nJewelry;	// 宝石のアイテム
	int					nMedal;		// メダルのアイテム
	int					nBullet;	// 敵に弾を当てた時
	int					nAttack;	// 敵に近接攻撃を当てたとき
	int					nPrisoner;	// 捕虜を助けた時
	int					nBonus;		// リザルトでのボーナス 自分の残機
	int					nBoss;		// リザルトでのボーナス ボスを倒した時

}SCORE_DATA;

// =====================================================================================================================================================================
// 前方宣言
// =====================================================================================================================================================================
// =====================================================================================================================================================================
// リザルトUIクラス
// =====================================================================================================================================================================
class CScoreManager
{
public:
	enum SCORE_TYPE
	{
		SCORE_ITEM_BEAR,		// 1500		// 熊のアイテム
		SCORE_ITEM_COIN,		// 10		// コインのアイテム
		SCORE_ITEM_JEWELRY,		// 800		// 宝石のアイテム
		SCORE_ITEM_MEDAL,		// 1000		// メダルのアイテム
		SCORE_DAMAGE_BULLET,	// 100		// 敵に弾を当てた時
		SCORE_DAMAGE_ATTACK,	// 500		// 敵に近接攻撃を当てたとき
		SCORE_RESCUE_PRISONER,	// 500		// 捕虜を助けた時
		SCORE_BONUS,			// 10000	// リザルトでのボーナス 自分の残機
		SCORE_KILLED_BOSS,		// 100000	// リザルトでのボーナス ボスを倒した時
		SCORE_TYPE_MAX,
	};

	CScoreManager();						// コンストラクタ
	~CScoreManager();						// デストラクタ

											/* メンバ関数 */
	HRESULT					Init(void);		// 初期化
	void					Uninit(void);	// 終了
	void					Update(void);	// 更新

	static					int				GetScorePoint(SCORE_TYPE type)				{ return m_nScore[type]; };

	/* 静的メンバ関数 */
	static					void			ScoreLoad();					// スコアのロード

	/* メンバ関数 */

private:
	/* 静的メンバ変数 */
	static	int					m_nScore[SCORE_TYPE_MAX];
	static	SCORE_DATA			m_ScoreData;									// スコアのデータ
	static	char				*m_ScoreFileName;								// スコアのファイル名
	static	void				SetScoreData();									// アイテムのデータ設定

	/* メンバ関数 */
};
#endif