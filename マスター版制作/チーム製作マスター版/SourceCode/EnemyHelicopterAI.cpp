// =====================================================================================================================================================================
//
// 敵のヘリコプターのAIの処理 [EnemyHelicopterAI.cpp]
// Author : Sato Yoshiki
//
// =====================================================================================================================================================================
#include "EnemyHelicopterAI.h"		// インクルードファイル
#include "renderer.h"
#include "WeakEnemy.h"
#include "Player.h"
#include "manager.h"
#include "BaseMode.h"
#include "map.h"
#include "gun.h"
#include "ModelSet.h"
#include "grenadefire.h"

// =====================================================================================================================================================================
// 静的メンバ変数の初期化
// =====================================================================================================================================================================

// =====================================================================================================================================================================
// マクロ定義
// =====================================================================================================================================================================
#define FIRE_COOLTIME				(180)					// 放つまでの時間
#define MOVE_START_TIME				(60)					// 移動するまでの時間
#define DISTANCE_TO_PLAYER			(5.0f)					// プレイヤーまでの距離
#define MOVE_SPEED					(4.0f)					// 移動スピード

// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CEnemyHelicopterAI::CEnemyHelicopterAI()
{
	m_pEnemyPass = nullptr;
}

// =====================================================================================================================================================================
//
// デストラクタ
//
// =====================================================================================================================================================================
CEnemyHelicopterAI::~CEnemyHelicopterAI()
{
	m_pEnemyPass = nullptr;
}

// =====================================================================================================================================================================
//
// 初期化処理
// 
// =====================================================================================================================================================================
HRESULT CEnemyHelicopterAI::Init(void)
{
	m_nCntShotFrame			= 0;								// 撃つまでのカウント
	m_nCntMoveStopFrame		= 0;								// 止まるまでのカウント
	m_nCntMoveFrame			= 0;								// 移動するまでのカウント
	m_StateAI				= EnemyHelicopterAI_STATE::NONE;	// AIの状態
	m_vec					= ZeroVector3;						// 向き
	return S_OK;
}

// =====================================================================================================================================================================
//
// 終了処理
// 
// =====================================================================================================================================================================
void CEnemyHelicopterAI::Uninit(void)
{
}

// =====================================================================================================================================================================
//
// 更新処理
// 
// =====================================================================================================================================================================
void CEnemyHelicopterAI::Update(void)
{
	// 攻撃するまでのカウントアップ
	m_nCntShotFrame++;

	// 敵のヘリコプターのAIの状態
	EnemyHelicopterAIState();
}

// =====================================================================================================================================================================
//
// 描画処理
// 
// =====================================================================================================================================================================
void CEnemyHelicopterAI::Draw(void)
{
}

// =====================================================================================================================================================================
//
// デバッグ情報表記
// 
// =====================================================================================================================================================================
void CEnemyHelicopterAI::DebugInfo(void)
{
}

// =====================================================================================================================================================================
//
// AIの生成
// 
// =====================================================================================================================================================================
CEnemyHelicopterAI * CEnemyHelicopterAI::CreateAI(CWeakEnemy *pEnemy)
{
	// 変数
	CEnemyHelicopterAI	*pEnemyHelicopterAI;

	// メモリの確保
	pEnemyHelicopterAI = new CEnemyHelicopterAI();

	// 初期化
	pEnemyHelicopterAI->Init();

	// エネミーの情報
	pEnemyHelicopterAI->m_pEnemyPass = pEnemy;

	return pEnemyHelicopterAI;
}

// =====================================================================================================================================================================
//
// AIの状態取得
// 
// =====================================================================================================================================================================
CEnemyHelicopterAI::EnemyHelicopterAI_STATE CEnemyHelicopterAI::GetAIType(void)
{
	return m_StateAI;
}

// =====================================================================================================================================================================
//
// 敵のヘリコプターのAIの状態
// 
// =====================================================================================================================================================================
void CEnemyHelicopterAI::EnemyHelicopterAIState()
{
	// プレイヤーのポインタ取得
	CPlayer *pPlayer = CManager::GetBaseMode()->GetPlayer(TAG::PLAYER_1);
	// マップのポインタ取得
	CMap *pMap = CManager::GetBaseMode()->GetMap();

	D3DXVECTOR3 pos = ZeroVector3;

	// エネミーの情報が入っているとき
	if (m_pEnemyPass)
	{
		// マップモデルが存在した時
		if (pMap)
		{
			// プレイヤーが存在しているとき
			if (pPlayer)
			{
				switch (m_StateAI)
				{
				case CEnemyHelicopterAI::EnemyHelicopterAI_STATE::NONE:
					// 移動状態にする
					m_StateAI = EnemyHelicopterAI_STATE::MOVE;
					break;

				case CEnemyHelicopterAI::EnemyHelicopterAI_STATE::STOP:

					// カウントアップ
					m_nCntMoveFrame++;

					// 正面を向く
					m_pEnemyPass->GetRotDest().y = 0;

					// 移動状態にする
					if (m_nCntMoveFrame > MOVE_START_TIME && fabsf(m_pEnemyPass->GetPosition().x - pPlayer->GetPosition().x) > 5.0f)
					{
						m_nCntMoveFrame = 0;
						m_StateAI = EnemyHelicopterAI_STATE::MOVE;
					}
					// 攻撃状態にする
					if (m_nCntShotFrame > FIRE_COOLTIME)
					{
						m_StateAI = EnemyHelicopterAI_STATE::ATTACK;
					}
					break;

				case CEnemyHelicopterAI::EnemyHelicopterAI_STATE::MOVE:

					// プレイヤーのほうに向く
					FaceToPlayer();

					// プレイヤーに合わせる
					pos = D3DXVECTOR3(pPlayer->GetPositionOld().x, m_pEnemyPass->GetPosition().y, m_pEnemyPass->GetPosition().z);

					// プレイヤーに追尾するための向き
					m_vec = pos - m_pEnemyPass->GetPosition();
					D3DXVec3Normalize(&m_vec, &m_vec);

					// 移動量の設定
					m_pEnemyPass->SetMove(D3DXVECTOR3(m_vec * MOVE_SPEED));

					// 攻撃状態にする
					if (m_nCntShotFrame > FIRE_COOLTIME)
					{
						m_StateAI = EnemyHelicopterAI_STATE::ATTACK;
					}
					// プレイヤーまでの距離が一定ラインを越えたら
					if (fabsf(m_pEnemyPass->GetPosition().x - pPlayer->GetPosition().x) < DISTANCE_TO_PLAYER)
					{
						// 停滞状態にする
						m_StateAI = EnemyHelicopterAI_STATE::STOP;
					}
					break;

				case CEnemyHelicopterAI::EnemyHelicopterAI_STATE::ATTACK:

					// ドロップボム投下
					m_pEnemyPass->GetGrenadeFirePtr()->Fire(ZeroVector3);
					m_nCntShotFrame = 0;

					// プレイヤーまでの距離が一定ラインを越えたら
					if (fabsf(m_pEnemyPass->GetPosition().x - pPlayer->GetPosition().x) < DISTANCE_TO_PLAYER)
					{
						// 停滞状態にする
						m_StateAI = EnemyHelicopterAI_STATE::STOP;
					}
					else
					{
						// 移動状態に戻す
						m_StateAI = EnemyHelicopterAI_STATE::MOVE;
					}
					break;
				}
			}
		}
	}
}

// =====================================================================================================================================================================
//
// プレイヤーのほうに向く
// 
// =====================================================================================================================================================================
void CEnemyHelicopterAI::FaceToPlayer()
{
	if (m_pEnemyPass->GetMove().x > 0)
	{
		m_pEnemyPass->GetRotDest().y = D3DX_PI * -0.5f;
		m_pEnemyPass->GetRotDest().z = D3DX_PI * -0.5f;
	}
	else if (m_pEnemyPass->GetMove().x < 0)
	{
		m_pEnemyPass->GetRotDest().y = D3DX_PI * 0.5f;
		m_pEnemyPass->GetRotDest().z = D3DX_PI * 0.5f;
	}
}