// =====================================================================================================================================================================
//
// UIの管理処理  [UIManager.h]
// Author: Sato Yoshiki
//
// =====================================================================================================================================================================

// =====================================================================================================================================================================
// インクルードファイル
// =====================================================================================================================================================================
#include "UIManager.h"
#include "manager.h"
#include "renderer.h"

// =====================================================================================================================================================================
// 静的メンバ変数の初期化
// =====================================================================================================================================================================
std::vector<CUI*> CUIManager::m_pUIList = {};

// =====================================================================================================================================================================
// マクロ
// =====================================================================================================================================================================

// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CUIManager::CUIManager()
{
}
// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CUIManager::CUIManager(OBJ_TYPE obj) : CScene(obj)
{
}
// =====================================================================================================================================================================
//
// デストラクタ
//
// =====================================================================================================================================================================
CUIManager::~CUIManager()
{
	m_pUIList.clear();
}
// =====================================================================================================================================================================
//
// 初期化処理
//
// =====================================================================================================================================================================
HRESULT CUIManager::Init()
{
	return S_OK;
}
// =====================================================================================================================================================================
//
// 終了処理
//
// =====================================================================================================================================================================
void CUIManager::Uninit()
{
	//nullcheck
	if (!m_pUIList.empty())
	{
		for (size_t nCnt = 0; nCnt < m_pUIList.size(); nCnt++)
		{
			m_pUIList[nCnt]->Uninit();

			delete m_pUIList[nCnt];

			m_pUIList[nCnt] = nullptr;
		}
		m_pUIList.clear();
	}
}
// =====================================================================================================================================================================
//
// 更新処理
//
// =====================================================================================================================================================================
void CUIManager::Update()
{
	//nullcheck
	if (!m_pUIList.empty())
	{
		for (size_t nCnt = 0; nCnt < m_pUIList.size(); nCnt++)
		{
			//更新処理
			m_pUIList[nCnt]->Update();

			//フラグ立っているかチェック
			if(m_pUIList[nCnt]->GetDeleteFlag())
			{
				//終了処理してメモリ開放
				m_pUIList[nCnt]->Uninit();

				// delete
				delete m_pUIList[nCnt];
				m_pUIList[nCnt] = nullptr;

				//配列から削除
				m_pUIList.erase(m_pUIList.begin() + nCnt);

				//削除してカウントがずれた分修正
				nCnt--;
			}
		}
	}
}
// =====================================================================================================================================================================
//
// 描画処理
//
// =====================================================================================================================================================================
void CUIManager::Draw()
{
	//nullcheck
	if (!m_pUIList.empty())
	{
		for (size_t nCnt = 0; nCnt < m_pUIList.size(); nCnt++)
		{
			m_pUIList[nCnt]->Draw();
		}
	}
}

// =====================================================================================================================================================================
//
// デバッグ情報表示
//
// =====================================================================================================================================================================
void CUIManager::DebugInfo()
{
#ifdef _DEBUG

#endif // _DEBUG
}

// =====================================================================================================================================================================
//
// UI生成
//
// =====================================================================================================================================================================
void CUIManager::Create()
{
	//メモリ確保
	CUIManager *pUI = new CUIManager(OBJTYPE_UI);

	//初期化
	pUI->Init();
}
// =====================================================================================================================================================================
//
// UIのリスト
//
// =====================================================================================================================================================================
void CUIManager::AddUIList(CUI *pUI)
{
	//配列に追加
	m_pUIList.emplace_back(std::move(pUI));
}