// =====================================================================================================================================================================
//
// ポーズの処理 [pause.cpp]
// Author : Sato Yoshiki
//
// =====================================================================================================================================================================
#include "pause.h"			// インクルードファイル
//#include "pauseUI.h"
#include "inputKeyboard.h"
#include "renderer.h"
#include "scene.h"
#include "XInputPad.h"
#include "fade.h"
#include "manager.h"
#include "sound.h"
#include "UIManager.h"
#include "pauseUI.h"
#include "GameManager.h"
#include "game.h"

// =====================================================================================================================================================================
// 静的メンバ変数の初期化
// =====================================================================================================================================================================
int					CPause::m_nNum = 1;

// =====================================================================================================================================================================
// マクロ定義
// =====================================================================================================================================================================
#define MAX_NUM		(2)

// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CPause::CPause()
{
	m_pPauseUI	= nullptr;
	m_nNum		= 1;
}

// =====================================================================================================================================================================
//
// デストラクタ
//
// =====================================================================================================================================================================
CPause::~CPause()
{
	m_pPauseUI->SetDeleteFlag(true);
	m_pPauseUI = nullptr;
}

// =====================================================================================================================================================================
//
// 初期化処理
//
// =====================================================================================================================================================================
HRESULT CPause::Init()
{
	// UI生成
	CUIManager::Create();
	// タイトルUIの生成
	m_pPauseUI = CPauseUI::Create();

	return S_OK;
}

// =====================================================================================================================================================================
//
// 終了処理
//
// =====================================================================================================================================================================
void CPause::Uninit(void)
{
}

// =====================================================================================================================================================================
//
// 更新処理
//
// =====================================================================================================================================================================
void CPause::Update(void)
{
	// 変数
	CKeyboard	*pKeyboard	= CManager::GetInputKeyboard();
	CXInputPad	*pXinputPad = nullptr;

	for (int nCnt = 0; nCnt < MAX_CONTROLLER; nCnt++)
	{
		// ゲームパッドの取得
		pXinputPad = CManager::GetPad((TAG)nCnt);
	}
	// アイコンの移動
	IconMove(pKeyboard, pXinputPad);

	// ポーズの更新
	if (m_pPauseUI)
	{
		m_pPauseUI->Update();
	}

	// ポーズの設定
	PauseConfig(pKeyboard, pXinputPad);

}

// =====================================================================================================================================================================
//
// 描画処理
//
// =====================================================================================================================================================================
void CPause::Draw(void)
{
}

void CPause::SetPos(D3DXVECTOR3 pos)
{
}

// =====================================================================================================================================================================
//
// ポーズの生成
//
// =====================================================================================================================================================================
CPause * CPause::Create()
{
	// 変数
	CPause *pPause;

	// メモリの確保
	pPause = new CPause();

	// 初期化
	pPause->Init();

	return pPause;
}

// =====================================================================================================================================================================
//
// ポーズの設定
//
// =====================================================================================================================================================================
void CPause::PauseConfig(CKeyboard *pKeyboard, CXInputPad *pXinputGpad)
{
	CGameManager *pGameManager = CManager::GetGame()->GetGameManager();

	// ポーズで選択し遷移
	switch (m_nNum)
	{
	case PAUSE_RESUME:					// 再開
		// ポーズ解除
		if (pKeyboard->GetKeyboardTrigger(DIK_RETURN) || pXinputGpad->GetTrigger(CXInputPad::JOYPADKEY_A, 1) || pXinputGpad->GetTrigger(CXInputPad::JOYPADKEY_START, 1))
		{
			//決定音
			CManager::GetSound()->Play(CSound::LABEL_SE_DECISION);

			// ポーズで止める設定
			CScene::StopUpdate();

			// 前の状態に戻す
			if (pGameManager)
			{
				pGameManager->SetGameState(pGameManager->GetGameStateOld());
			}
		}
		break;

	case PAUSE_RESTART:					// リスタート
			// ゲームへ遷移
		if (pKeyboard->GetKeyboardTrigger(DIK_RETURN) || pXinputGpad->GetTrigger(CXInputPad::JOYPADKEY_A, 1) || pXinputGpad->GetTrigger(CXInputPad::JOYPADKEY_START, 1))
		{
			//決定音
			CManager::GetSound()->Play(CSound::LABEL_SE_DECISION);
			// ゲームへ
			CManager::GetRenderer()->GetFade()->SetFade(CFADE::FADETYPE::FADETYPE_MODE, CManager::MODE_GAME);
		}
		break;

	case PAUSE_TITLE:					// タイトル
			// タイトルへ遷移
		if (pKeyboard->GetKeyboardTrigger(DIK_RETURN) || pXinputGpad->GetTrigger(CXInputPad::JOYPADKEY_A, 1) || pXinputGpad->GetTrigger(CXInputPad::JOYPADKEY_START, 1))
		{
			//決定音
			CManager::GetSound()->Play(CSound::LABEL_SE_DECISION);
			// タイトルへ
			CManager::GetRenderer()->GetFade()->SetFade(CFADE::FADETYPE::FADETYPE_MODE, CManager::MODE_TITLE);

		}
		break;
	}
}

// =====================================================================================================================================================================
//
// アイコンの移動移動
//
// =====================================================================================================================================================================
void CPause::IconMove(CKeyboard *pKeyboard, CXInputPad *pXinputGpad)
{
	// === アイコン移動 ===
	if (pKeyboard->GetKeyboardTrigger(DIK_W) || pXinputGpad->GetTrigger(CXInputPad::JOYPADKEY_UP,1))
	{
		// デクリメント
		m_nNum--;

		// 最後に戻す
		if (m_nNum < PAUSE_RESUME)
		{
			m_nNum = PAUSE_TITLE;
		}
	}
	if (pKeyboard->GetKeyboardTrigger(DIK_S) || pXinputGpad->GetTrigger(CXInputPad::JOYPADKEY_DOWN, 1))
	{
		// インクリメント
		m_nNum++;

		// 最初に戻す
		if (m_nNum > PAUSE_TITLE)
		{
			m_nNum = PAUSE_RESUME;
		}
	}
}